<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaFS</name>
    </assembly>
    <members>
        <member name="T:Alphaleonis.Win32.Filesystem.FileType">
            <summary>
            Specifies the type of a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.Unknown">
            <summary>
            The type of the specified file is unknown.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.DiskFile">
            <summary>
            The specified file is a disk file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.CharacterFile">
            <summary>
            The specified file is a character file, typically an LPT device or a console.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.Pipe">
            <summary>
            The specified file is a socket, a named pipe, or an anonymous pipe.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.Remote">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo">
            <summary>
            Represents information about free and used space on a disk.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initializes the structure
            </summary>
            <param name="freeBytes">The free bytes available</param>
            <param name="totalBytes">The total number of bytes</param>
            <param name="totalFreeBytes">The total number of free bytes</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Equality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.FreeBytesAvailable">
            <summary>
            Gets or sets the free bytes available.
            </summary>
            <value>The free bytes available.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfBytes">
            <summary>
            Gets or sets the total number of bytes.
            </summary>
            <value>The total number of bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfFreeBytes">
            <summary>
            Gets or sets the total number of free bytes.
            </summary>
            <value>The total number of free bytes.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.VolumeInfo">
            <summary>
            Represents information about a volume.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Name">
            <summary>
            Gets the name of the volume.
            </summary>
            <value>The name of the volume.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PreservesCase">
            <summary>
            Gets a value indicating whether the file system preserves the case of file names when it places a name on disk..
            </summary>
            <value><c>true</c> if the file system preserves the case of file names when it places a name on disk.]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsCaseSensitiveFileNames">
            <summary>
            Gets a value indicating whether the file system supports case-sensitive file names..
            </summary>
            <value>
            	<c>true</c> if the file system supports case-sensitive file names; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsFileCompression">
            <summary>
            Gets a value indicating whether the file system supports file-based compression.
            </summary>
            <value>
            	<c>true</c> if the file system supports file-based compression; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsNamedStreams">
            <summary>
            Gets a value indicating whether the file system supports named streams.
            </summary>
            <value>
            	<c>true</c> if the file system supports named streams; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.HasPersistentAccessControlLists">
            <summary>
            Gets a value indicating whether the file system preserves and enforces access control lists (ACL).
            </summary>
            <value>
            	<c>true</c> if the file system preserves and enforces access control lists (ACL); otherwise, <c>false</c>.
            </value>
            <remarks>For example, the NTFS file system preserves and enforces ACLs, and the FAT file system does not.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether the specified volume is read-only..
            </summary>
            <value>
            	<c>true</c> if the specified volume is read-only.; otherwise, <c>false</c>.
            </value>
            <remarks>This value is not supported on Windows 2000/NT and Windows Me/98/95.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsEncryption">
            <summary>
            Gets a value indicating whether the file system supports the Encrypted File System (EFS).
            </summary>
            <value><c>true</c> if the file system supports the Encrypted File System (EFS); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIdentifiers">
            <summary>
            Gets a value indicating whether the file system supports object identifiers.
            </summary>
            <value>
            	<c>true</c> if the file system supports object identifiers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsReparsePoints">
            <summary>
            Gets a value indicating whether he file system supports re-parse points.
            </summary>
            <value>
            	<c>true</c> if he file system supports re-parse points; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsSparseFiles">
            <summary>
            Gets a value indicating whether the file system supports sparse files.
            </summary>
            <value><c>true</c> if the file system supports sparse files; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsUnicodeFileNames">
            <summary>
            Gets a value indicating whether the file system supports Unicode in file names as they appear on disk.
            </summary>
            <value>
            	<c>true</c> if the file system supports Unicode in file names as they appear on disk; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.IsCompressed">
            <summary>
            Gets a value indicating whether the specified volume is a compressed volume, for example, a DoubleSpace volume.
            </summary>
            <value>
            	<c>true</c> if the specified volume is a compressed volume; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsDiskQuotas">
            <summary>
            Gets a value indicating whether the file system supports disk quotas.
            </summary>
            <value><c>true</c> if the file system supports disk quotas; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SerialNumber">
            <summary>
            Gets the volume serial number that the operating system assigns when a hard disk is formatted.
            </summary>
            <value>The volume serial number that the operating system assigns when a hard disk is formatted.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.MaximumComponentLength">
            <summary>
            Gets the maximum length of a file name component that the file system supports.
            </summary>
            <value>The maximum length of a file name component that the file system supports.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FileSystemName">
            <summary>
            Gets the name of the file system, for example, the FAT file system or the NTFS file system.
            </summary>
            <value>The name of the file system.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileOptions">
            <summary>
            Specifies how the operating system should open a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.None">
            <summary>
            None of the options specified.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Archive">
            <summary>
            The file should be archived. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Hidden">
            <summary>
            The file is hidden. Do not include it in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Normal">
            <summary>
            The file does not have other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Offline">
            <summary>
            The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.ReadOnly">
            <summary>
            The file is read only. Applications can read the file, but cannot write to or delete it.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.System">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Temporary">
            <summary>
            The file is being used for temporary storage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.BackupSemantics">
            <summary>
            The file is being opened or created for a backup or restore operation. The system ensures that the calling process 
            overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. 
            You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.DeleteOnClose">
            <summary>
            <para>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.</para>
            <para>If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:Alphaleonis.Win32.Filesystem.FileShare.Delete"/> share mode.</para>
            <para>Subsequent open requests for the file fail, unless the <see cref="F:Alphaleonis.Win32.Filesystem.FileShare.Delete"/> share mode is specified.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.NoBuffering">
            <summary>
            There are strict requirements for successfully working with files opened with the <see cref="F:Alphaleonis.Win32.Filesystem.FileOptions.NoBuffering"/> flag, for 
            details see the section on "File Buffering" in the online MSDN documentation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.OpenNoRecall">
            <summary>
            The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.OpenReparsePoint">
            <summary>
            <para>Normal reparse point processing will not occur; an attempt to open the reparse point will be made. 
            When a file is opened, a file handle is returned, whether or not the filter that controls the reparse 
            point is operational. See MSDN documentation for more information.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.Overlapped">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.PosixSemantics">
            <summary>
            Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.RandomAccess">
            <summary>
            Access is intended to be random. The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.SequentialScan">
            <summary>
            Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileOptions.WriteThrough">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemInfo">
            <summary>
            Provides the base class for both FileInfo and DirectoryInfo objects.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.mExists">
            <summary>
            Indicator of file existence. It refreshes each time Refresh() has been called.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.mFileSystemEntryInfo">
            <summary>
            Represents extended file information.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullPath">
            <summary>
            Represents the fully qualified path of the directory or file.
            </summary>
            <remarks>
            Notes to Inheritors: 
            Classes derived from FileSystemInfo can use the FullPath field to determine the full path of the object being manipulated.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.OriginalPath">
            <summary>
            The path originally specified by the user, whether relative or absolute.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <remarks>
            FileSystemInfo.Refresh takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98. 
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated. 
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ThrowDoesNotExistsException">
            <summary>
            Throws the does not exists exception.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Initialize(System.String)">
            <summary>
            Initializes the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.DirectoryName">
            <summary>
            Gets a full path string representing the file's parent directory.
            </summary>
            <value>A string representing the parent directory full path.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the current <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/>. 
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object.
            </summary>
            <returns>The creation date and time of the current System.IO.FileSystemInfo object.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time, in coordinated universal time (UTC), of the current FileSystemInfo object.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Extension">
            <summary>
            The Extension property returns the FileSystemInfo extension, including the period (.). For example, for a file c:\NewFile.txt, this property returns ".txt".
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullName">
            <summary>
            A string containing the name with full path.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.SystemInfo">
            <summary>
            Gets the system info.
            </summary>
            <value>The system info.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed. 
            </summary>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed
            </summary>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.
            </summary>
            <remarks>
            For a directory, Name returns only the name of the parent directory, such as Dir, not c:\Dir. For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\Dir\Sub1. 
            For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\Dir\Myfile.txt. 
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.GET_FILEEX_INFO_LEVELS">
            <summary>
            Defines values that are used with the GetFileAttributes function to specify the information level of the returned data.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard">
            <summary>
            The GetFileAttributes function retrieves a standard set of attribute information. The data is returned in a WIN32_FILE_ATTRIBUTE_DATA structure.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.GET_FILEEX_INFO_LEVELS.GetFileExMaxInfoLevel">
            <summary>
            One greater than the maximum value. Valid values for this enumeration will be less than this value.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA">
            <summary>
            Note: for some marshalling reason WIN32_FIND_DATA whould be declared as class not a struct.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.dwReserved1">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes">
            <summary>
            Class used to represent the SECURITY_ATTRIBUES native win32 structure. 
            It provides initialization function from an ObjectSecurity object.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes.Initialize(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Security.AccessControl.ObjectSecurity)">
            <summary>
            Initializes the SecurityAttributes structure from an instance of <see cref="T:System.Security.AccessControl.ObjectSecurity"/>.
            </summary>
            <param name="memoryHandle">A handle that will refer to the memory allocated by this object for storage of the 
            security descriptor. As long as this object is used, the memory handle should be kept alive, and afterwards it
            should be disposed as soon as possible.</param>
            <param name="securityDescriptor">The security descriptor to assign to this object. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS.FindExInfoBasic">
            <summary>
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.PathInfo">
            <summary>
            A representation of a path, providing convenient access to the individual components 
            of the path.
            </summary>
            <remarks>Note that no methods in this class verifies whether the path actually exists or not.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class.
            </summary>
            </overloads>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException">The path is not a legal path in the Win32 file system.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class specifying whether wildcards
            should be accepted or not.
            </summary>
            <param name="path">The path.</param>
            <param name="allowWildcardsInFileName">if set to <c>true</c> wildcards are allowed in the file 
            name part of the path. If set to <c>false</c>, wildcards are not allowed and an
            <see cref="T:System.ArgumentException"/> will be thrown if they are present.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
            <remarks>
                <para>Note that under no circumstances will this class accept wildcards in 
                      the directory part of the path, only in the file-name, i.e. the component
                      after the last backslash or separator. 
                </para>
                <para>
                    Extended length unicode paths (also referred to as long paths) (those starting with \\?\) will <b>not</b> be 
                    parsed for wildcards etc., regardless of the setting of this parameter.
                    In such a path any character is valid and backslashes alone are considered
                    to be separators.
                </para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="indices">The indices.</param>
            <param name="extensionIndex">Position of the beginning of the file extension in the path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetLongPath">
            <summary>
            	Retrieves the full long (or extended) unicode version of the path represented by this <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> instance.
            </summary>
            <remarks>
            <para>
            	This method takes care of different path conversions to be usable in Unicode 
            	variants of the Win32 funcitons (which are internally used throughout AlphaFS).
            </para>
            <para>
            	Regular paths are changed like the following:
            	<list type="table">
            		<item>
            			<term><c>C:\Somewhere\Something.txt</c></term>
            			<description><c>\\?\C:\Somewhere\Something.txt</c></description>
            		</item>
            		<item>
            			<term><c>\\Somewhere\Something.txt</c></term>
            			<description><c>\\?\UNC\Somewhere\Something.txt</c></description>
            		</item>
            	</list>
            </para> 
            <para>
            	Already processed paths are preserved untouched so to avoid mistakes of double prefixing.
            </para>
            <para>
            	If the path represented by this instance is not an absolute path, or is not rooted, the path of the
            	current directory (and drive) is combined with this path to form
            	an absolute path.
            </para>
            </remarks>
            <returns>The long or extended unicode version of the specified path.</returns>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.PathInfo.GetFullPath"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetFullPath">
            <summary>
            Gets the full absolute path of the path represented by this instance.
            This is done by "applying" the path to the current directory if the path
            does not contain a root, or the volume of the current directory if the
            path does not contain any drive information.
            </summary>
            <returns>The full absolute path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.CompareTo(Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Performs a lexiographical comparison of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="other">A <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Equals(Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Performs a lexiographical comparison for equality of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Equals(System.Object)">
            <summary>
            Performs a lexiographical comparison for equality of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Combine(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Combines two paths.
            </summary>
            <param name="path1">The first path. </param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Addition(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Combines two paths.
            </summary>
            <param name="path1">The first path. </param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Equality(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Inequality(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_LessThan(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_GreaterThan(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Parent">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <returns>The parent directory, or <see langword="null"/> if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedPath">
            <summary>
            Gets the full normalized path, with a trailing backslash if the path denotes a directory.
            </summary>
            <value>The full normalized path, with a trailing backslash if the path denotes a directory.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.Path"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Path">
            <summary>
            Gets the full normalized path.
            </summary>
            <value>The full path.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedPath"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.FileName">
            <summary>
            Gets the file name part of the path.
            </summary>
            <value>The file name part of the path, or an empty string if the path does not contain a file name.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Root">
            <summary>
            Gets the root of the path.
            </summary>
            <value>The root of the path, which may be a drive (eg. "C:\"), a remote computer as part of 
            an UNC path (eg. "\\OtherComputer\"), a unique volume name 
            (eg. "\\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\") or a single directory
            separator ("\") if no drive or volume is present in the path. If does not contain 
            any root, an empty string is returned.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.IsRooted">
            <summary>
            Gets a value indicating whether the path is rooted.
            </summary>
            <value><c>true</c> if this instance is rooted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.HasFileName">
            <summary>
            Gets a value indicating whether this instance has file name.
            </summary>
            <value>
            	<c>true</c> if this instance has file name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Extension">
            <summary>
            Gets the extension of the file name of this path.
            </summary>
            <value>The extension of the file name of this path, or an empty string if the path does
            not contain a file name or the file name does not have an extension.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.HasExtension">
            <summary>
            Gets a value indicating whether the file name in this path has an extension.
            </summary>
            <value>
            	<c>true</c> if the file name in this path has an extension; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.FileNameWithoutExtension">
            <summary>
            Gets the file name without extension.
            </summary>
            <value>The file name without extension or an empty string if the 
            path does not contain a file name.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName">
            <summary>
            Returns the directory information for the path with a trailing directory separator.
            </summary>
            <value>The name of the suffixed directory with a trailing directory separator.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryNameWithoutRoot">
            <summary>
            Returns the directory information for the path without the root information, and with a trailing backslash.
            </summary>
            <value>The path without the root and file name part (if any) and with a trailing backslash.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryNameWithoutRoot"/>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName"/>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName">
            <summary>
            Returns the directory information for the path.
            </summary>
            <value>The path without the file name part (if any).</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryNameWithoutRoot">
            <summary>
            Returns the directory information for the path with the root stripped off.
            </summary>
            <value>The path without the root and file name part (if any).</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryComponents">
            <summary>
            Gets a list exposing the individual components of the directory part of this path.
            </summary>
            <value>The directory components of this path.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Add(System.String)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <value>The component of the directory at the specified index</value>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Parser.ResolveParentReference">
            <summary>
            Removes a reference to the parent directory ("..") if possible.
            This must be called *before* the reference to the parent directory has been
            added.
            </summary>
            <returns><c>true</c> if the reference was removed, and <c>false</c> if it was kept.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus">
            <summary>
            Represents the encryption status of the specified file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encryptable">
            <summary>
            The file can be encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encrypted">
            <summary>
            The file is encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.ReadOnly">
            <summary>
            The file is a read-only file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.RootDir">
            <summary>
            The file is a root directory. Root directories cannot be encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemFile">
            <summary>
            The file is a system file. System files cannot be encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemDirectory">
            <summary>
            The file is a system directory. System directories cannot be encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.NoFilesystemSupport">
            <summary>
            The file system does not support file encryption.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Unknown">
            <summary>
            The encryption status is unknown. The file may be encrypted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.UserDisallowed">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException">
            <summary>
            The requested operation could not be completed because the device was not ready.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">
            <summary>
            It is too late to perform the requested operation, since the Transaction has already been aborted.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle">
            <summary>
            IntPtr wrapper which can be used as result of
            Marshal.AllocHGlobal operation.
            Calls Marshal.FreeHGlobal when disposed or finalized.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.#ctor">
            <summary>
            Creates new instance with zero IntPtr
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance-
            </summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.ReleaseHandle">
            <summary>
            Called when object is disposed or finalized.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo">
            <summary>
            Represents information retrieved by <see cref="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)"/>.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
            <value>The file attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.CreationTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure that specified when a file or directory was created.
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file or directory was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastAccessTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is read from or written to. 
            For a directory, the structure specifies when the directory is created. 
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastWriteTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is written to. 
            For a directory, the structure specifies when the directory is created. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.VolumeSerialNumber">
            <summary>
            Gets the the serial number of the volume that contains a file.
            </summary>
            <value>The serial number of the volume that contains a file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.NumberOfLinks">
            <summary>
            Gets the number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.
            </summary>
            <value>The number of links to this file. </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileIndex">
            <summary>
            Gets the unique identifier associated with the file. The identifier and the volume serial number uniquely identify a 
            file on a single computer. To determine whether two open handles represent the same file, combine the identifier 
            and the volume serial number for each file and compare them.
            </summary>
            <value>The unique identifier of the file.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileAccess">
            <summary>
            <para>Defines constants for read, write, or read/write access to a file.</para>
            <para>This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAccess.None">
            <summary>
            No access to the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAccess.Read">
            <summary>
            Read access to the file. Data can be read from the file. Combine with Write for read/write access.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAccess.Write">
            <summary>
            Write access to the file. Data can be written to the file. Combine with Read for read/write access.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAccess.ReadWrite">
            <summary>
            Read and write access to the file. Data can be written to and read from the file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle">
            <summary>
            Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile methods of the Win32 API
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified dirPath.
            </summary>
            <param name="dirPath">A string specifying the path on which to create the DirectoryInfo.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <remarks>
            FileSystemInfo.Refresh takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <remarks>
            If the DirectoryInfo has no files or subdirectories, this method deletes the DirectoryInfo even if recursive is false. Attempting to delete a DirectoryInfo that is not empty when recursive is false throws an IOException.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">if set to <c>true</c> ignores read only attribute of files and directories.</param>
            <remarks>
            If the DirectoryInfo has no files or subdirectories, this method deletes the DirectoryInfo even if recursive is false. Attempting to delete a DirectoryInfo that is not empty when recursive is false throws an IOException.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.ToString">
            <summary>
            Returns the original path that was passed by the user.
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl">
            <summary>
            Gets a DirectorySecurity object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object.
            </summary>
            <returns>A DirectorySecurity object that encapsulates the access control rules for the directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a DirectorySecurity object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current DirectoryInfo object.
            </summary>
            <param name="includeSections">One of the AccessControlSections values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a DirectorySecurity object to the directory described by the current DirectoryInfo object.
            </summary>
            <param name="directorySecurity">A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
            <remarks>If there are no subdirectories, this method returns an empty array. This method is not recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <remarks>
            Wildcards are permitted. For example, the searchPattern string "*t" searches for all directory names in path ending with the letter "t". The searchPattern string "s*" searches for all directory names in path beginning with the letter "s".
            The string ".." can only be used in searchPattern if it is specified as a part of a valid directory name, such as in the directory name "a..b". It cannot be used to move up the directory hierarchy.
            If there are no subdirectories, or no subdirectories match the searchPattern parameter, this method returns an empty array.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">One of the values of the SearchOption enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>
            An array of type DirectoryInfo matching searchPattern.
            </returns>
            <remarks>
            Wildcards are permitted. For example, the searchPattern string "*t" searches for all directory names in path ending with the letter "t". The searchPattern string "s*" searches for all directory names in path beginning with the letter "s".
            The string ".." can only be used in searchPattern if it is specified as a part of a valid directory name, such as in the directory name "a..b". It cannot be used to move up the directory hierarchy.
            If there are no subdirectories, or no subdirectories match the searchPattern parameter, this method returns an empty array.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern.
            </summary>
            <param name="searchPattern">The search string, such as "*.txt".</param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern and using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">One of the values of the SearchOption enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An array of type FileInfo.</returns>
            <remarks>
            The following wildcard specifiers are permitted in searchPattern: "*" and "?".
            The order of the returned file names is not guaranteed; use the Sort()()() method if a specific sort order is required.
            Wildcards are permitted. For example, the searchPattern string "*.txt" searches for all file names having an extension of "txt".
            The searchPattern string "s*" searches for all file names beginning with the letter "s". If there are no files, or no files that match the searchPattern string in the DirectoryInfo, this method returns an empty array.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed FileSystemInfo entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed FileSystemInfo entries.</returns>
            <remarks>
            This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo. Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            Wild cards are permitted. For example, the searchPattern string "*t" searches for all directory names in path ending with the letter "t". The searchPattern string "s*" searches for all directory names in path beginning with the letter "s".
            The string ".." can only be used in searchPattern if it is specified as a part of a valid directory name, such as in the directory name "a..b". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the searchPattern string in the DirectoryInfo, this method returns an empty array.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Retrieves an array of strongly typed FileSystemInfo objects representing the files and subdirectories matching the specified search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
            <remarks>
            This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo. Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            Wild cards are permitted. For example, the searchPattern string "*t" searches for all directory names in path ending with the letter "t". The searchPattern string "s*" searches for all directory names in path beginning with the letter "s".
            The string ".." can only be used in searchPattern if it is specified as a part of a valid directory name, such as in the directory name "a..b". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the searchPattern string in the DirectoryInfo, this method returns an empty array.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory.
            The destination cannot be directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param>
            <remarks>
            This method throws an IOException if, for example, you try to move c:\mydir to c:\public, and c:\public already exists. You must specify "c:\\public\\mydir" as the destDirName parameter, or specify a new directory name such as "c:\\newdir".
            This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.
            For a list of common I/O tasks, see Common I/O Tasks.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Name">
            <summary>
            Gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.
            </summary>
            <value></value>
            <remarks>
            For a directory, Name returns only the name of the parent directory, such as Dir, not c:\Dir. For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\Dir\Sub1.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
            <value>The parent directory, or nullNothingnullptra null reference (Nothing in Visual Basic) if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
            <value>A DirectoryInfo object representing the root of a path.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine">
            <summary>
            Callback used by MoveFile and CopyFile to report progress about the
            operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_NOT_ACTIVE">
            <summary>
            The requested operation was made in the context of a transaction that is no longer active.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_REQUEST_NOT_VALID">
            <summary>
            The requested operation is not valid on the Transaction object in its current state.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONAL_CONFLICT">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE">
            <summary>
            The remote server or share does not support transacted file operations.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Volume">
            <summary>
            Static class providing utility methods for working with Microsoft Windows devices and volumes. Most
            of the methods in this class is simple convenience methods for native Win32 API-calls to make them 
            simpler to use from managed languages.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumes">
            <summary>
            Retrieves the name of all volumes on the computer.
            </summary>
            <remarks>Requires Windows Vista, Windows XP, or Windows 2000 Professional.</remarks>
            <returns>An array containing the volume names on the computer.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeMountPoints(System.String)">
            <summary>
            Retrieves the names of all volume mount points on the specified volume.
            </summary>
            <remarks>Requires Windows Vista, Windows XP, or Windows 2000 Professional.</remarks>
            <param name="volumeName">The unique volume name of the volume to scan for volume mount points. A trailing backslash is required.</param>
            <returns>The names of all volume mount points on the specified volume.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetCurrentDriveType">
            <summary>
            Determines whether a disk drive containing the current directory is a removable, fixed, CD-ROM, RAM disk, or network drive.
            </summary>
            <remarks>Requires Windows Vista, Windows XP, or Windows 2000 Professional.</remarks>
            <returns>A value indicating whether a disk drive containing the current directory is a removable, fixed, CD-ROM, RAM disk, or network drive.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveType(System.String)">
            <summary>
            Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
            </summary>
            <remarks>Requires Windows Vista, Windows XP, or Windows 2000 Professional.</remarks>
            <param name="volumeName">The root directory for the drive. A trailing backslash is required. </param>
            <returns>A value indicating whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetLogicalDrives">
            <summary>
            Returns an array of strings that specify valid drives in the system.
            </summary>
            <remarks>Each string in the buffer may be used wherever a root directory is required, such as for the GetDriveType and GetDiskFreeSpace functions.</remarks>
            <returns>An array of strings that specify valid drives in the system.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.String)">
            <summary>
            Retrieves information about the file system and volume associated with the specified root directory.
            </summary>
            <param name="rootPathName">The root directory of the volume to be described.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory</returns>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="rootPathName"/> was not a valid volume name</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.IO.FileStream)">
            <summary>
            Retrieves information about the file system and volume associated with the specified <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The file.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory</returns>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="file"/> was not a valid volume name</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeLabel(System.String,System.String)">
            <summary>
            Sets the label of a file system volume.
            </summary>
            <param name="rootPathName">The root directory of a file system volume. This is the volume the function will label. A trailing backslash is required.</param>
            <param name="volumeName">A name for the volume.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootPathName"/> or <paramref name="volumeName"/> is a <see langword="null"/> reference.</exception>        
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetCurrentVolumeLabel(System.String)">
            <summary>
            Sets the label of the file system volume that is the root of the current directory
            </summary>
            <param name="volumeName">A name for the volume.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeName"/> is a <see langword="null"/> reference.</exception>        
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeLabel(System.String)">
            <summary>
            Deletes the label of a file system volume.
            </summary>
            <param name="rootPathName">The root directory of a file system volume. This is the volume the function will label. A trailing backslash is required.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootPathName"/> is a <see langword="null"/> reference.</exception>        
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteCurrentVolumeLabel">
            <summary>
            Deletes the label of the file system volume that is the root of the current directory
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeMountPoint(System.String,System.String)">
            <summary>
            Mounts the specified volume at the specified volume mount point.
            </summary>
            <param name="volumeMountPoint">The volume mount point where the volume is to be mounted. This may be a root directory (X:\) or a directory on a volume (X:\mnt\). The string must end with a trailing backslash ('\').</param>
            <param name="volumeName">The volume to be mounted. This string must be a unique volume name of the form "\\?\Volume{GUID}\" where GUID is a GUID that identifies the volume. The \\?\ turns off path parsing and is ignored as part of the path. For example, "\\?\C:\myworld\private" is seen as "C:\myworld\private".</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeMountPoint(System.String)">
            <summary>
            Unmounts the volume from the specified volume mount point.
            </summary>
            <param name="volumeMountPoint">The volume mount point to be unmounted. This may be a root directory (X:\, in which case the DOS drive letter assignment is removed) or a directory on a volume (X:\mnt\). A trailing backslash is required.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeMountPoint"/> is <see langword="null"/></exception>
            <remarks>It is not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume mount point.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String)">
            <summary>
            Defines or redefines MS-DOS device names.
            </summary>
            <param name="targetPath">A MS-DOS path string that will implement this device.</param>
            <param name="deviceName">An MS-DOS device name string specifying the device the function is 
            defining or redefining. The device name string must not have a trailing colon, unless a drive 
            letter (C or D, for example) is being defined or redefined. In no case is a trailing backslash allowed.</param>
            <returns><c>true</c> upon success, or <c>false</c> otherwise.</returns>
            <remarks>Call Marshal.GetLastWin32Error() to receive additional error information if this method fails.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String)">
            <summary>
            Deletes an MS-DOS device name.
            </summary>
            <param name="deviceName">An MS-DOS device name string specifying the device the function is 
            deleting. The device name string must not have a trailing colon, unless a drive 
            letter (C or D, for example) is being deleted. In no case is a trailing backslash allowed.</param>
            <returns><c>true</c> upon success, or <c>false</c> otherwise.</returns>
            <remarks>Call Marshal.GetLastWin32Error() to receive additional error information if this method fails.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String)">
            <summary>
            Retrieves information about MS-DOS device names. 
            The function can obtain the current mapping for a particular MS-DOS device name. 
            The function can also obtain a list of all existing MS-DOS device names.
            </summary>
            <param name="device">The device.</param>
            <returns>An MS-DOS device name string specifying the target of the query. The device name cannot have a 
            trailing backslash. This parameter can be <see langword="null"/>. In that case, the QueryDosDevice function 
            will return an array of all existing MS-DOS device names</returns>
            <remarks>See documentation on MSDN for the Windows QueryDosDevice() method for more information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices">
            <summary>
            Retreives a list of all existing MS-DOS device names. 
            </summary>
            <returns>A list of all existing MS-DOS device names.</returns>
            <remarks>
            <para>This is equivalent to calling <c>QueryDosDevice(null)</c></para>
            <para>See documentation on MSDN for the Windows QueryDosDevice() method for more information.</para></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDisplayNameForVolume(System.String)">
            <summary>
            Gets the shortest display name for the specified <paramref name="volumeName"/>.
            </summary>
            <param name="volumeName">The volume name.</param>
            <returns>The shortest display name for the specified volume found, or <see langword="null"/> if no display names were found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeName"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occured during a system call, such as the volume name specified was invalid or did not exist.</exception>
            <remarks>This method basically returns the shortest string returned by <see cref="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)"/></remarks>        
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)">
            <summary>
            Retrieves a list of path names for the specified volume name.
            </summary>
            <param name="volumeName">The volume name.</param>
            <returns>An array containing the path names for the specified volume.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeName"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.IO.FileNotFoundException">The volume name specified was invalid, did not exist or was not ready.</exception>
            <remarks>For more information about this method see the MSDN documentation on GetVolumePathNamesForVolumeName().</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsVolume(System.String)">
            <summary>
            Determines whether the specified volume name is a defined volume on the current computer.
            </summary>
            <param name="volumePath">A string representing the path to a volume (eg. "C:\", "D:", "P:\Mountpoint\Backup", "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\"). A trailing backslash is required.</param>
            <returns>
            	<c>true</c> if the specified volume is a defined volume; otherwise, <c>false</c>.
            </returns>
            <remarks>The trailing backslash is optional</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumePath"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Upon error retreiving the volume name</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForVolumeMountPoint(System.String)">
            <summary>
            Retrieves the unique volume name for the specified volume mount point or root directory.
            </summary>
            <param name="mountPoint">The path of a volume mount point (with or without a trailing backslash, "\") or a drive letter indicating a root directory (eg. "C:" or "D:\"). A trailing backslash is required.</param>
            <returns>The unique volume name of the form "\\?\Volume{GUID}\" where GUID is the GUID that identifies the volume.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mountPoint"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mountPoint"/> is an empty string</exception>        
            <exception cref="T:System.ComponentModel.Win32Exception">Upon error retreiving the volume name</exception>
            <remarks>See the MSDN documentation on the method GetVolumeNameForVolumeMountPoint() for more information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForPath(System.String)">
            <summary>
            Retrieves the unique name of the volume mount point where the specified path is mounted.
            </summary>
            <param name="path">The input path. Both absolute and relative file and 
            directory names, for example ".", are acceptable in this path.
            If you specify a relative directory or file name without a volume qualifier, 
            GetUniqueVolumeNameForPath returns the drive letter of the boot volume. A trailing backslash is required.</param>
            <returns>The unique name of the volume mount point where the specified path is mounted</returns>
            <remarks>See the MSDN documentation on the method GetVolumePathName() for more information.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is an empty string</exception>        
            <exception cref="T:System.ComponentModel.Win32Exception">Upon error retreiving the volume name</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDeviceForVolumeName(System.String)">
            <summary>
             Retreives the Win32 device name from the volume name
            </summary>
            <param name="volumeName">Name of the volume. A trailing backslash is not allowed.</param>
            <returns>The Win32 device name from the volume name</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpace(System.String)">
            <summary>
            Retrieves information about the amount of space that is available on a disk volume, 
            which is the total amount of space, the total amount of free space, and the total amount of 
            free space available to the user that is associated with the calling thread.
            </summary>
            <param name="directory">A directory on the disk. 
            If this parameter is NULL, the function uses the root of the current disk. 
            If this parameter is a UNC name, it must include a trailing backslash, for example, "\\MyServer\MyShare\".
            This parameter does not have to specify the root directory on a disk. The function accepts any directory on a disk.
            
            The calling application must have FILE_LIST_DIRECTORY access rights for this directory.
            </param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> object containing the requested information.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle">
            <summary>
            Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AlphaFSInternalError">
             <summary>
               Looks up a localized string similar to AlphaFS Internal Error:
            .
             </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ArgumentMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to Argument must not be empty.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AttemptingToGenerateExceptionFromSuccessfulOperation">
             <summary>
               Looks up a localized string similar to Incorrectly implemented function attempting to generate exception from successful operation.
            .
             </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.BufferIsNotLargeEnoughForTheRequestedOperation">
            <summary>
              Looks up a localized string similar to Buffer is not large enough for the requested operation..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.CountMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Count must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotEmpty">
            <summary>
              Looks up a localized string similar to Directory not empty.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory not found.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ErrorCodeWas0">
            <summary>
              Looks up a localized string similar to Error code was: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HardLinksOnNonNTFSPartitionsIsNotSupported">
            <summary>
              Looks up a localized string similar to Creating hard-links on non-NTFS partitions is not supported.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.IllegalPath0">
            <summary>
              Looks up a localized string similar to Illegal path: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.IncompleteHeaderRead">
            <summary>
              Looks up a localized string similar to Incomplete header read..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidDirectoryName">
            <summary>
              Looks up a localized string similar to Invalid directory name.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidFileName0">
            <summary>
              Looks up a localized string similar to Invalid file name: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidHandle">
            <summary>
              Looks up a localized string similar to Invalid handle.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidSearchPattern">
            <summary>
              Looks up a localized string similar to Invalid search pattern.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidSecurityDescriptorReturnedFromSystem">
            <summary>
              Looks up a localized string similar to Invalid security descriptor returned from system..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransaction">
            <summary>
              Looks up a localized string similar to Invalid transaction object.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransactionRequest">
            <summary>
              Looks up a localized string similar to Invalid transaction request.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.NotAReparsePoint">
            <summary>
              Looks up a localized string similar to The file or directory is not a reparse point.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.OffsetMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Offset must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.PathAlreadyExists">
            <summary>
              Looks up a localized string similar to Path already exists.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ThisStreamDoesNotSupportSeeking">
            <summary>
              Looks up a localized string similar to This stream does not support seeking..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionalConflict">
            <summary>
              Looks up a localized string similar to Transactional conflict.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyAborted">
            <summary>
              Looks up a localized string similar to Transaction already aborted.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyCommitted">
            <summary>
              Looks up a localized string similar to Transaction already committed.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotActive">
            <summary>
              Looks up a localized string similar to Transaction not active.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotRequested">
            <summary>
              Looks up a localized string similar to Transaction not requested.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkType">
            <summary>
            Specifies the type of a symbolic link
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Absolute">
            <summary>
            The symbolic link is absolute
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Relative">
            <summary>
            The symbolic link is relative
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressResult">
            <summary>
            The <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> function should return one of the following values.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Continue">
            <summary>
            Continue the copy operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Cancel">
            <summary>
            Cancel the copy operation and delete the destination file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Stop">
            <summary>
            Stop the copy operation. It can be restarted at a later time.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Quiet">
            <summary>
            Continue the copy operation, but stop invoking <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> to report progress.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException">
            <summary>
            The transaction handle associated with this operation is not valid.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.PrivilegeEnabler">
            <summary>
            Used to enable one or more privileges. The privileges specified will be enabled during the 
            lifetime of the instance. Users create an instance of this object in a <c>using</c> statement
            to ensure that it is properly disposed when the elevated privileges are no longer needed.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege,Alphaleonis.Win32.Security.Privilege[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class. This will enable the
            privileges specified (unless already enabled), and ensure that they are disabled again when
            the object is disposed. (Any privileges already enabled will not be disabled).
            </summary>
            <param name="privilege">The privilege to enable.</param>
            <param name="privileges">Additional privileges to enable.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.Dispose">
            <summary>
            Makes sure any privileges enabled by this instance are disabled.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Security.PrivilegeEnabler.EnabledPrivileges">
            <summary>
            Gets the enabled privileges. Note that this might not contain all privileges specified
            to the constructor. Only the privileges actually enabled by this instance is returned.
            </summary>
            <value>The enabled privileges.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.MoveFileOptions">
            <summary>
            The move options for a file move operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.ReplaceExisting">
            <summary>
            If the destination file name already exists, the function replaces its contents with the contents of the 
            source file.
            </summary>
            <remark>This value cannot be used if either source or destination names a directory.</remark>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed">
            <summary>
            If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.
            </summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot">
            <summary>
            <para>The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.</para>
            <para>This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.</para>
            </summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.WriteThrough">
            <summary>
            <para>The function does not return until the file has actually been moved on the disk.</para>
            <para>Setting this value guarantees that a move performed as a copy and delete operation is flushed 
            to disk before the function returns. The flush occurs at the end of the copy operation.</para>
            </summary>
            <remarks>This value has no effect if <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/> is set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CreateHardlink">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.FailIfNotTrackable">
            <summary>
            The function fails if the source file is a link source, but the file cannot be tracked after the move. 
            This situation can occur if the destination is a volume formatted with the FAT file system.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.IllegalPathException">
            <summary>
            The exception that is thrown when a pathname or filename is illegal.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo">
            <summary>
            Represents information about a symbolic link.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo">
            <summary>
            Information about the target of a symbolic link or mount point.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.SubstituteName">
            <summary>
            The substitute name
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.PrintName">
            <summary>
            The print name
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.LinkType">
            <summary>
            Gets the type of the link.
            </summary>
            <value>The type of the link.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo">
            <summary>
            The <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> structure contains stream header data.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.
            </summary>
            <param name="streamID">The stream ID.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Size">
            <summary>
            Gets the size of the data in the substream, in bytes.
            </summary>
            <value>The size of the data in the substream, in bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Name">
            <summary>
            Gets a string that specifies the name of the alternative data stream.
            </summary>
            <value>A string that specifies the name of the alternative data stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.StreamType">
            <summary>
            Gets the type of the data in the stream.
            </summary>
            <value>The type of the data in the stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Attributes">
            <summary>
            Gets the attributes of the data to facilitate cross-operating system transfer.
            </summary>
            <value>Attributes of the data to facilitate cross-operating system transfer.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Security.InternalPrivilegeEnabler">
            <summary>
            This object is used to enable a specific privilege for the currently running process during its lifetime. 
            It should be disposed as soon as the elevated privilege is no longer needed.
            For more information see the documentation on AdjustTokenPrivileges on MSDN.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class and enabling the specified privilege
            for the currently running process.
            </summary>
            <param name="privilegeName">The name of the privilege.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            In this case the privilege previously enabled will be disabled.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.AdjustPrivilege(System.Boolean)">
            <summary>
            Adjusts the privilege.
            </summary>
            <param name="enable">if set to <c>true</c> the privilege will be enabled, otherwise disabled.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.StreamAttributes">
            <summary>
            Attributes of data to facilitate cross-operating system transfer.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>    
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ModifiedWhenRead">
            <summary>
            Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ContainsSecurity">
            <summary>
            Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore. 
            This attribute applies only to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SecurityData"/>.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ContainsProperties">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.Normal">
            <summary>
            This backup stream has no special attributes.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.Sparse">
            <summary>
            The backup stream is part of a sparse file stream. This attribute applies only to backup stream of 
            type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Data"/>, <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.AlternateData"/>, and <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SparseBlock"/>.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemRights">
            <summary>
            Defines the access rights to use when creating access and audit rules. 
            </summary>
            <remarks>
            	This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.
            </remarks>	
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Read">
            <summary>
            Specifies the right to open and copy folders or files as read-only. This right includes the 
            <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadData"/> right, <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadExtendedAttributes"/> right, <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadAttributes"/> right, 
            and <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadPermissions"/> right. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Write">
            <summary>
            Specifies the right to create folders and files, and to add or remove data from files. This right includes the 
            <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteData"/> right, <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.AppendData"/> right, <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteExtendedAttributes"/> right, and <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteAttributes"/> right. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadAndExecute">
            <summary>
            Specifies the right to open and copy folders or files as read-only, and to run application files. 
            This right includes the <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Read"/> right and the <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ExecuteFile"/> right. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Modify">
            <summary>
            Specifies the right to read, write, list folder contents, delete folders and files, and run application files. 
            This right includes the <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadAndExecute"/> right, the <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Write"/> right, and the <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Delete"/> right. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadData">
            <summary>
            Specifies the right to open and copy a file or folder. This does not include the right to read file system attributes, extended file system attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ListDirectory">
            <summary>
            Specifies the right to read the contents of a directory. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteData">
            <summary>
            Specifies the right to open and write to a file or folder. This does not include the right to open and write file system attributes, extended file system attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.CreateFiles">
            <summary>
            Specifies the right to create a file. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.AppendData">
            <summary>
            Specifies the right to append data to the end of a file. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.CreateDirectories">
            <summary>
            Specifies the right to create a folder. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadExtendedAttributes">
            <summary>
            Specifies the right to open and copy extended file system attributes from a folder or file. For example, this value specifies the right to view author and content information. This does not include the right to read data, file system attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteExtendedAttributes">
            <summary>
            Specifies the right to open and write extended file system attributes to a folder or file. This does not include the ability to write data, attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ExecuteFile">
            <summary>
            Specifies the right to run an application file. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Traverse">
            <summary>
            Specifies the right to list the contents of a folder and to run applications contained within that folder.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.DeleteSubdirectoriesAndFiles">
            <summary>
            Specifies the right to delete a folder and any files contained within that folder. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadAttributes">
            <summary>
            Specifies the right to open and copy file system attributes from a folder or file. For example, this value specifies the right to view the file creation or modified date. This does not include the right to read data, extended file system attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.WriteAttributes">
            <summary>
            Specifies the right to open and write file system attributes to a folder or file. This does not include the ability to write data, extended attributes, or access and audit rules. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Delete">
            <summary>
            Specifies the right to delete a folder or file. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ReadPermissions">
            <summary>
            Specifies the right to open and copy access and audit rules from a folder or file. This does not include the right to read data, file system attributes, and extended file system attributes. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ChangePermissions">
            <summary>
            Specifies the right to change the security and audit rules associated with a file or folder. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.TakeOwnership">
            <summary>
            Specifies the right to change the owner of a folder or file. Note that owners of a resource have full access to that resource. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.Synchronize">
            <summary>
            Specifies whether the application can wait for a file handle to synchronize with the completion of an I/O operation. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.FullControl">
            <summary>
            Specifies the right to exert full control over a folder or file, and to modify access control and audit rules. 
            This value represents the right to do anything with a file and is the combination of all rights in this enumeration except
            for <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.SystemSecurity"/>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemRights.SystemSecurity">
            <summary>
            The <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.SystemSecurity"/> access right controls the ability to get or set the SACL in an object's security 
            descriptor. The system grants this access right only if the <see cref="F:Alphaleonis.Win32.Security.Privilege.Security"/> privilege is enabled in the 
            access token of the requesting thread (see <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>).
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupFileStream">
            <summary>
            The <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> provides access to data associated with a specific file or directory, including security information
            and alternative data streams, for backup and restore operations.
            </summary>
            <remarks>This class uses the <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupRead</see>, 
            <see href="http://msdn.microsoft.com/en-us/library/aa362510(VS.85).aspx">BackupSeek</see> and 
            <see href="http://msdn.microsoft.com/en-us/library/aa362511(VS.85).aspx">BackupWrite</see> functions from the Win32 API to provide
            access to the file or directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights
            and sharing permission, additional file options, access control and audit security.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="options">A <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> constant that specifies additional file options.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
            <overloads>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class.
            </overloads>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights
            and sharing permission, and additional file options.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="options">A <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> constant that specifies additional file options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights
            and sharing permission.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights
            and sharing permission, additional file options, access control and audit security.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="options">A <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> constant that specifies additional file options.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
            <overloads>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class.
            </overloads>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights
            and sharing permission, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="options">A <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> constant that specifies additional file options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights 
            and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> constant that determines how to open or create the file. </param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FileSystemRights)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class for the specified file handle, with the specified read/write permission.
            </summary>
            <param name="handle">A file handle for the file that this <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate. </param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemRights"/> constant that gets the <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead"/> and <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite"/> properties 
            of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within
            the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not backup the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within
            the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="processSecurity">Indicates whether the function will backup the access-control list (ACL) data for the file or directory. </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)">
            <summary>
            Skips ahead the specified number of bytes from the current stream.
            </summary>
            <remarks>
            <para>
                This method represents the Win32 API implementation of <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupSeek</see>.
            </para>
            <para>
            Applications use the <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> method to skip portions of a data stream that cause errors. This function does not 
            seek across stream headers. For example, this function cannot be used to skip the stream name. If an application 
            attempts to seek past the end of a substream, the function fails, the return value indicates the actual number of bytes 
            the function seeks, and the file position is placed at the start of the next stream header.
            </para>
            </remarks>
            <param name="bytes">The number of bytes to skip.</param>
            <returns>The number of bytes actually skipped.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <remarks>
                <para>
                    <note>
                        <para>
                            This stream does not support seeking using this method, and calling this method will always throw 
                            <see cref="T:System.NotSupportedException"/>. See <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> for an alternative way of seeking forward.
                        </para>
                    </note>
                </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the file described by the 
            current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. 
            </summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the current file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This method is not supported by the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class, and calling it will always
            generate a <see cref="T:System.NotSupportedException"/>.</remarks>
            <exception cref="T:System.NotSupportedException">Always thrown by this class.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written.
            </summary>
            <overloads>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </overloads>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not process the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="processSecurity">Specifies whether the function will restore the access-control list (ACL) data for the file or directory. 
            If this is <see langword="true"/>, you need to specify <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.TakeOwnership"/> and <see cref="F:Alphaleonis.Win32.Filesystem.FileSystemRights.ChangePermissions"/> access when 
            opening the file or directory handle. If the handle does not have those access rights, the operating system denies 
            access to the ACL data, and ACL data restoration will not occur.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked. 
            </summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the 
            current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. 
            </summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the 
            current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.ReadStreamInfo">
            <summary>
            Reads a stream header from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.
            </summary>
            <returns>The stream header read from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>, or <see langword="null"/> if the end-of-file 
            was reached before the required number of bytes of a header could be read.</returns>
            <remarks>The stream must be positioned at where an actual header starts for the returned object to represent valid 
            information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> while permitting read access. 
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
            <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>        
            <returns>This method always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeHandle">
            <summary>
            Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object that represents the operating system file handle for the file that 
            the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.
            </summary>
            <value>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object that represents the operating system file handle for the file that 
            the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.File">
            <summary>
            Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
            As opposed to the corresponding <see cref="T:System.IO.File"/> class, this class supports the use of extended length unicode paths, such as 
            <c>\\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\autoexec.bat</c>. In addition, support for transacted file operation using the 
            kernel transaction manager is provided. (See also <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/>).
            </summary>
            <remarks>Note that no methods in this class perform any validation of the supplied paths. They are passed as is to the corresponding
            native kernel functions, meaning that invalid paths may result in exceptions of a type other than the expected for a certain operation.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String)">
            <overloads>
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. 
            </summary>
            <remarks>
            If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </remarks>
            </overloads>
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to. </param>
            <param name="contents">The string to append to the file. </param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Opens a file as part of a transaction, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file as part of a transaction, creating the file if it does not already exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String)">
            <overloads>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.
            </overloads>
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/>, that is part of a transaction, that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String)">
            <overloads>
            Copies an existing file to a new file.
            </overloads>
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. 
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="existingFileName">The name of an existing file. </param>
            <param name="destinationFileName">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="existingFileName">The name of an existing file.</param>
            <param name="destinationFileName">The name of the new file.</param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns>
            	<c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object,System.Boolean)">
            <summary>
            Copies an existing file to a new file, notifying the application of its progress through a callback function.
            </summary>
            <param name="existingFileName">The name of an existing file.</param>
            <param name="destinationFileName">The name of the new file.</param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="progressRoutine">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns>
            	<c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Copies an existing file to a new file as a transacted operation. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file as a transacted operation.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>
            Copies an existing file to a new file as a transacted operation.
            </summary>
            <param name="existingFileName">The name of an existing file. </param>
            <param name="destinationFileName">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="transaction">The transaction to use.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>
            Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.
            </summary>
            <param name="existingFileName">The name of an existing file. </param>
            <param name="destinationFileName">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="progressRoutine">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="transaction">The transaction to use.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String)">
            <overloads>
            Creates, overwrites or opens a file or directory in the specified path.
            </overloads>
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>
            A new file with the specified buffer size.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates or overwrites the specified file, specifying a buffer size, a <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> value that describes how to create or overwrite the file and a specified <see cref="T:System.Security.AccessControl.FileSecurity"/>.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <returns>
            A new file with the specified buffer size and security options.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions,System.Security.AccessControl.FileSecurity,System.Int32)">
            <summary>
            Creates or overwrites the specified file,
            specifying advanced options <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/>, <see cref="T:Alphaleonis.Win32.Filesystem.FileAccess"/>, <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/>, <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/> and a buffer size.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="mode">The <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:Alphaleonis.Win32.Filesystem.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <param name="options">The <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>A new file with the specified options and buffer size.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates or overwrites a file in the specified path as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32)">
            <summary>
            Creates or overwrites a file in the specified path as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Creates or overwrites the specified file as part of a transaction, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>
            A new file with the specified buffer size.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates or overwrites the specified file as part of a transaction, specifying a buffer size, a <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> value that describes how to create or overwrite the file and a specified <see cref="T:System.Security.AccessControl.FileSecurity"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <returns>
            A new file with the specified buffer size and security options.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String)">
            <overloads>
            Creates or opens a file for writing UTF-8 encoded text.
            </overloads>
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing. </param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String)">
            <overloads>
            <summary>
            Deletes the specified file.
            </summary>
            <remarks>
             An exception is not thrown if the specified file does not exist.
            </remarks>
            </overloads>
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <param name="overrideReadOnly">if set to <c>true</c> overrides read only attribute of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Deletes the specified file as part of a transaction. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>
            Deletes the specified file as part of a transaction. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <param name="overrideReadOnly">if set to <c>true</c> overrides read only attribute of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decrypt(System.String)">
            <summary>
            Decrypts a file that was encrypted by the current account using the Encrypt method.
            </summary>
            <param name="path">A path that describes a file to decrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Encrypt(System.String)">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
            <param name="path">A path that describes a file to encrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatus(System.String)">
            <summary>
            Retrieves the encryption status of the specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(System.String)">
            <overloads>
            Determines whether the specified file exists.
            </overloads>
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is nullNothingnullptra null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Determines whether the specified file exists as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns>
            true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is nullNothingnullptra null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String)">
            <overloads>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates access control list (ACL) entries for a particular file.
            </overloads>
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.
            </summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>
            A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular file.
            </summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.
            </summary>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.FileSecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="fileSecurity"/> to 
            apply to <paramref name="path"/>.</remarks>
            <param name="path">A file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A  <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control 
            list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(System.String)">
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(System.String)">
            <overloads>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the file on the path.
            </overloads>
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file. </param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the file on the path as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>
            The <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of the file on the path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(System.String,Alphaleonis.Win32.Filesystem.FileAttributes)">
            <overloads>
            Sets the attributes for a file or directory.
            </overloads>
            <summary>
            Sets the attributes for a file or directory.
            </summary>
            <param name="path">The name of the file whose attributes are to be set. </param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.Normal"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileAttributes)">
            <summary>
            Sets the attributes for a file or directory as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.Normal"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(System.String)">
            <overloads>
            Returns the creation date and time of the specified file or directory. 
            </overloads>
            <summary>
            Returns the creation date and time of the specified file or directory. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(System.String)">
            <overloads>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory. 
            </overloads>
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(System.String)">
            <overloads>
            Returns the date and time the specified file or directory was last accessed. 
            </overloads>
            <summary>
            Returns the date and time the specified file or directory was last accessed. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(System.String)">
            <overloads>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed. 
            </overloads>
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed. 
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(System.String)">
             <overloads>
            Returns the date and time the specified file or directory was last written to. 
             </overloads>
             <summary>
            Returns the date and time the specified file or directory was last written to. 
             </summary>
             <param name="path">The path.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(System.String)">
            <overloads>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </overloads>
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory as part of a transaction.
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory as part of a transaction. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed as part of a transaction. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed as part of a transaction. 
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
             <summary>
            Returns the date and time the specified file or directory was last written to as part of a transaction. 
             </summary>
             <param name="path">The path.</param>
             <param name="transaction">The transaction to use.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to as part of a transaction.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)">
            <overloads>
            Retrieves file information for the specified file.
            </overloads>
            <summary>
            Retrieves file information for the specified file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.FileStream"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo"/> object containing the requested information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Retrieves file information for the specified file.
            </summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo"/> object containing the requested information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String)">
            <overloads>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </overloads>
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method works across disk volumes, and it does not throw an exception if the source and destination are 
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you 
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveFileOptions)">
            <summary>
            Moves a file or directory, including its children. 
            </summary>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/>, the file cannot exist on 
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath">
            <para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume. 
            If <paramref name="destinationPath"/> is on another drive, you must set the 
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            <para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para>
            </param>
            <param name="options">The move options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveFileOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>
            Moves a file or directory, including its children. You can provide a callback function that receives 
            progress notifications.
            </summary>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/>, the file cannot exist on 
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath">
            <para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume. 
            If <paramref name="destinationPath"/> is on another drive, you must set the 
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            <para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para>
            </param>
            <param name="options">The move options.</param>
            <param name="progressRoutine">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another 
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays 
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns><c>true</c> if the file was completely moved, <c>false</c> if the operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Moves a specified file to a new location as part of a transaction, providing the option to specify a new file name.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveFileOptions)">
            <summary>
            Moves a file or directory  as part of a transaction, including its children.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveFileOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>
            Moves a file or directory as part of a transaction, including its children. You can provide a callback function that receives
            progress notifications.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveFileOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
            <param name="progressRoutine">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns>
            	<c>true</c> if the file was completely moved, <c>false</c> if the operation was aborted.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,Alphaleonis.Win32.Filesystem.FileMode)">
            <overloads>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path.
            </overloads>
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or 
            read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="options">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="options">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupRead(System.String)">
            <summary>
            Opens the specified file for reading purposes bypassing security attributes.
            This method is simpler to use then BackupFileStream to read only file's data stream.
            </summary>
            <param name="path">The file path to open.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path as part of a transaction, with the specified mode and access.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path as part of a transaction, having the specified mode with read, write, or
            read/write access and the specified sharing option.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="options">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileSystemRights,Alphaleonis.Win32.Filesystem.FileShare,Alphaleonis.Win32.Filesystem.FileOptions)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:Alphaleonis.Win32.Filesystem.FileMode"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:Alphaleonis.Win32.Filesystem.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="options">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(System.String)">
            <overloads>
            Opens an existing file for reading.
            </overloads>
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing file for reading as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A read-only <see cref="T:System.IO.FileStream"/> on the specified path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String)">
            <overloads>
            Opens an existing UTF-8 encoded text file for reading.
            </overloads>
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(System.String)">
            <overloads>
            Opens an existing file for writing.
            </overloads>
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with Write access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing file for writing as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with Write access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(System.String,System.String)">
            <summary>
            Transfers the time stamps for files and directories.
            </summary>
            <param name="source">The source path.</param>
            <param name="destination">The destination path.</param>
            <remarks>
            This method uses BackupSemantics flag to get Timestamp changed for folders.
            This method does not change last access time for the source file.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(System.String)">
            <overloads>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </overloads>
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A byte array containing the contents of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String)">
            <overloads>
            Opens a text file, reads all lines of the file, and then closes the file.
            </overloads>
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>
            Opens a file as part of a transaction, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String)">
            <overloads>
            Opens a text file, reads all lines of the file, and then closes the file.
            </overloads>
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String)">
            <overloads>
            Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.
            </overloads>
            <summary>
            Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.
            </summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.
            </summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">set to <c>true</c> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetFileTimeInternal(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Internal method for setting file times on a file.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
            <remarks>This method uses FileOptions.BackupSemantics flag to write Timestamps to folders as well.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time the file was created.
            </overloads>
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in local time, that the file was last accessed.
            </overloads>
            <summary>
            Sets the date and time, in local time, that the file was last accessed.
            </summary>
            <param name="path">The file for which to set the last access date and time information. </param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The file for which to set the last access date and time information. </param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in local time, that the file was last modified.
            </overloads>
            <summary>
            Sets the date and time, in local time, that the file was last modified.
            </summary>
            <param name="path">The file for which to set the last modification date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last modification date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was last modified.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last modified.
            </summary>
            <param name="path">The file for which to set the last modification date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last modification date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <overloads>
            Sets all the time stamps at once.
            </overloads>
            <summary>
            Sets the time stamps at once.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <overloads>
            Sets all the time stamps at once in UTC.
            </overloads>
            <summary>
            Sets all the time stamps at once in UTC.
            </summary>
            <remarks>
            This method is redundant, because NTFS driver converts any dates in UTC format anyways.
            </remarks>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetFileTimeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Internal method for setting file times on a file as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in local time, that the file was last accessed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last access date and time information.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last access date and time information.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in local time, that the file was last modified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last modification date and time information.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was last modified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last modification date and time information.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time stamps at once.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time stamps at once in UTC. But it's redundant, because NTFS driver converts any dates in UTC format anyways.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(System.String,System.Byte[])">
            <overloads>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[])">
            <summary>
            Creates a new file as part of a transaction, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[])">
            <overloads>
            Creates a new file, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">he string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[])">
            <summary>
            Creates a new file as part of a transaction, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file as part of a transaction, writes the specified string array to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">he string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String)">
            <overloads>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(System.String,System.String)">
            <overloads>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </overloads>
            <summary>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <exception cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">The destination file already exists.</exception>
            <exception cref="T:System.NotSupportedException">An attempt to create a hard-link on a non-supported filesystem</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFile"/> could not be found</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="transaction">The transaction to use.</param>
            <exception cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">The destination file already exists.</exception>
            <exception cref="T:System.NotSupportedException">An attempt to create a hard-link on a non-supported filesystem</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFile"/> could not be found</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <overloads>
            Creates a symbolic link.
            </overloads>		
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="sourceFile">The name of the target for the symbolic link to be created.</param>
            <param name="destinationFile">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destinationFile"/>, is a file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>
            Creates a symbolic link as part of a transaction.
            </summary>
            <param name="sourceFile">The name of the target for the symbolic link to be created.</param>
            <param name="destinationFile">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destinationFile"/>, is a file or directory.</param>
            <param name="transaction">The transaction to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(System.String)">
            <summary>
            Gets information about the target of a mount point or symbolic link on an NTFS file system.
            </summary>
            <param name="sourceFile">The path to the reparse point.</param>
            <returns>An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFile"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Gets information about the target of a mount point or symbolic link on an NTFS file system as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFile">The path to the reparse point.</param>
            <returns>
            An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFile"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(System.String)">
            <overloads>
            <summary>Enumerates all hard links to the specified file.</summary>
            </overloads>
            <summary>
            Creates an enumeration of all the hard links to the specified <paramref name="fileName"/>. 
            </summary>
            <remarks><b>Required Windows Vista or later.</b></remarks>
            <param name="fileName">The name of the file.</param>
            <returns>An enumeration of all the hard links to the specified <paramref name="fileName"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates an enumeration of all the hard links to the specified <paramref name="fileName"/> as part
            of the specified <paramref name="transaction"/>.
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="fileName">The name of the file.</param>
            <returns>
            An enumeration of all the hard links to the specified <paramref name="fileName"/>
            </returns>
            <remarks><b>Required Windows Vista or later.</b></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(System.String)">
            <overloads>
            Retrieves the actual number of bytes of disk storage used to store a specified file. 
            </overloads>
            <summary>
            Retrieves the actual number of bytes of disk storage used to store a specified file. 
            </summary>
            <remarks>
            If the file is located on a volume that
            supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </remarks>		
            <param name="fileName"><para>The name of the file.</para>
            	<para>Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning.</para></param>
            <returns>
            the actual number of bytes of disk storage used to store the specified file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file is located on a volume that
            supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName"><para>The name of the file.</para>
            	<para>Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning.</para></param>
            <returns>
            the actual number of bytes of disk storage used to store the specified file.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Privilege">
            <summary>
            Represents a privilege for an access token. The privileges available on the local machine are available as 
            static instances from this class. To create a <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing a privilege on another system,
            use the constructor specifying a system name together with one of these static instances.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.AssignPrimaryToken">
            <summary>
            Required to assign the primary token of a process. User Right: Replace a process-level token.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Audit">
            <summary>
            Required to generate audit-log entries. Give this privilege to secure servers. User Right: Generate security audits.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Backup">
            <summary>
            Required to perform backup operations. This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Any access request other than read is still evaluated with the ACL. User Right: Back up files and directories.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ChangeNotify">
            <summary>
            Required to receive notifications of changes to files or directories. This privilege also causes the system to skip all traversal access checks. It is enabled by default for all users. User Right: Bypass traverse checking.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateGlobal">
            <summary>
            Required to create named file mapping objects in the global namespace during Terminal Services sessions. This privilege is enabled by default for administrators, services, and the local system account. User Right: Create global objects.
            </summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePagefile">
            <summary>
            Required to create a paging file. User Right: Create a pagefile.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePermanent">
            <summary>
            Required to create a permanent object. User Right: Create permanent shared objects.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink">
            <summary>
            Required to create a symbolic link. User Right: Create symbolic links.
            </summary>           
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateToken">
            <summary>
            Required to create a primary token. User Right: Create a token object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Debug">
            <summary>
            Required to debug and adjust the memory of a process owned by another account. User Right: Debug programs.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.EnableDelegation">
            <summary>
            Required to mark user and computer accounts as trusted for delegation. User Right: Enable computer and user accounts to be trusted for delegation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Impersonate">
            <summary>
            Required to impersonate. User Right: Impersonate a client after authentication.
            </summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseBasePriority">
            <summary>
            Required to increase the base priority of a process. User Right: Increase scheduling priority.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseQuota">
            <summary>
            Required to increase the quota assigned to a process. User Right: Adjust memory quotas for a process.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseWorkingSet">
            <summary>
            Required to allocate more memory for applications that run in the context of users. User Right: Increase a process working set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LoadDriver">
            <summary>
            Required to load or unload a device driver. User Right: Load and unload device drivers.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LockMemory">
            <summary>
            Required to lock physical pages in memory. User Right: Lock pages in memory.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.MachineAccount">
            <summary>
            Required to create a computer account. User Right: Add workstations to domain.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ManageVolume">
            <summary>
            Required to enable volume management privileges. User Right: Manage the files on a volume.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ProfileSingleProcess">
            <summary>
            Required to gather profiling information for a single process. User Right: Profile single process.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Relabel">
            <summary>
            Required to modify the mandatory integrity level of an object. User Right: Modify an object label.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.RemoteShutdown">
            <summary>
            Required to shut down a system using a network request. User Right: Force shutdown from a remote system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Restore">
            <summary>
            Required to perform restore operations. This privilege causes the system to grant all write access control to any file, regardless of the ACL specified for the file. Any access request other than write is still evaluated with the ACL. Additionally, this privilege enables you to set any valid user or group SID as the owner of a file. User Right: Restore files and directories.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Security">
            <summary>
            Required to perform a number of security-related functions, such as controlling and viewing audit messages. This privilege identifies its holder as a security operator. User Right: Manage auditing and security log.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Shutdown">
            <summary>
            Required to shut down a local system. User Right: Shut down the system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SyncAgent">
            <summary>
            Required for a domain controller to use the LDAP directory synchronization services. This privilege enables the holder to read all objects and properties in the directory, regardless of the protection on the objects and properties. By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. User Right: Synchronize directory service data.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemEnvironment">
            <summary>
            Required to modify the nonvolatile RAM of systems that use this type of memory to store configuration information. User Right: Modify firmware environment values.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemProfile">
            <summary>
            Required to gather profiling information for the entire system. User Right: Profile system performance.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemTime">
            <summary>
            Required to modify the system time. User Right: Change the system time.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TakeOwnership">
            <summary>
            Required to take ownership of an object without being granted discretionary access. This privilege allows the owner value to be set only to those values that the holder may legitimately assign as the owner of an object. User Right: Take ownership of files or other objects.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Tcb">
            <summary>
            This privilege identifies its holder as part of the trusted computer base. Some trusted protected subsystems are granted this privilege. User Right: Act as part of the operating system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TimeZone">
            <summary>
            Required to adjust the time zone associated with the computer's internal clock. User Right: Change the time zone.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TrustedCredManAccess">
            <summary>
            Required to access Credential Manager as a trusted caller. User Right: Access Credential Manager as a trusted caller.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Undock">
            <summary>
            Required to undock a laptop. User Right: Remove computer from docking station.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.UnsolicitedInput">
            <summary>
            Required to read unsolicited input from a terminal device. User Right: Not applicable.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String,Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Create a new <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing the specified privilege on the specified system.
            </summary>
            <param name="systemName">Name of the system.</param>
            <param name="privilege">The privilege to copy the privilege name from.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupDisplayName">
            <summary>
            Retrieves the display name that represents this privilege.
            </summary>
            <returns>The display name that represents this privilege.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupLuid">
            <summary>
            Retrieves the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).
            </summary>
            <returns>the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.ToString">
            <summary>
            Returns the system name for this privilege.
            </summary>
            <remarks>This is equivalent to <see cref="P:Alphaleonis.Win32.Security.Privilege.Name"/>.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.Privilege"/> class, representing a privilege
            with the specified name on the local system.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Privilege.Name">
            <summary>
            Gets the system name identifying this privilege.
            </summary>
            <value>The system name identifying this privilege.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget">
            <summary>
            Indicates whether the link target is a file or directory.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.File">
            <summary>
            The link target is a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.Directory">
            <summary>
            The link target is a directory.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamType">
            <summary>
            The type of the data contained in the backup stream.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Unknown">
            <summary>
            This indicates an error.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Data">
            <summary>
            Standard data
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ExtendedAttributesData">
            <summary>
            Extended attribute data
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SecurityData">
            <summary>
            Security descriptor data
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.AlternateData">
            <summary>
            Alternative data streams
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Link">
            <summary>
            Hard Link Information
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.PropertyData">
            <summary>
            Property data
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ObjectId">
            <summary>
            Object identifiers
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ReparseData">
            <summary>
            Reparse points
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SparseBlock">
            <summary>
            Sparse file
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileMode">
            <summary>
            Specifies how the operating system should open a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMode.CreateNew">
            <summary>
            Specifies that the operating system should create a new file. If the file already exists, an exception is thrown.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMode.Create">
            <summary>
            Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. 
            Create is equivalent to requesting that if the file does not exist, use <see cref="F:Alphaleonis.Win32.Filesystem.FileMode.CreateNew"/>; otherwise, use <see cref="F:Alphaleonis.Win32.Filesystem.FileMode.Truncate"/>.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMode.Open">
            <summary>
            Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by <see cref="T:Alphaleonis.Win32.Filesystem.FileAccess"/>. A <see cref="T:System.IO.FileNotFoundException"/> is thrown if the file does not exist.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMode.OpenOrCreate">
            <summary>
            Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMode.Truncate">
            <summary>
            Specifies that the operating system should open an existing file. Once opened, the file should be truncated so that its size is zero bytes. Attempts to read from a file opened with <c>Truncate</c> cause an exception.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream objects.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. 
            </summary>
            <param name="filePath">The path to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a <see langword="null"/> reference.</exception>
            <remarks>
            You can specify either the fully qualified or the relative file name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <remarks>
            FileSystemInfo.Refresh takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete">
            <summary>
            Deletes a file.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns>A string representing the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.
            </summary>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file. 
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite"><c>true</c> to allow an existing file to be overwritten; otherwise, <c>false</c>.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A new file, or an overwrite of an existing file if overwrite is true. If the file exists and overwrite is false, an IOException is thrown.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns><see cref="T:System.IO.FileStream"/>A new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CreateText">
            <summary>
            Creates a <see crefe="System.IO.StreamWriter"/> that writes a new text file. 
            </summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decrypt">
            <summary>
            Decrypts a file that was encrypted by the current account using the <see cref="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt"/> method.
            </summary>
            <remarks>The Decrypt method allows you to decrypt a file that was encrypted using the Encrypt method.
            The Decrypt method can decrypt only files that were encrypted using the current user account.
            Both the Encrypt method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.
            The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
            <remarks>
            The Encrypt method allows you to encrypt a file so that only the account used to call this method can decrypt it. Use the Decrypt method to decrypt a file encrypted by the Encrypt method. 
            Both the Encrypt method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method. 
            The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object.
            </summary>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/>A FileSecurity object that encapsulates the access control rules for the current file. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.
            </summary>
            <param name="includeSections">The include sections.</param>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <remarks>This method works across disk volumes. For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(Alphaleonis.Win32.Filesystem.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access. 
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access"><see cref="T:System.IO.FileAccess"/>A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(Alphaleonis.Win32.Filesystem.FileMode,Alphaleonis.Win32.Filesystem.FileAccess,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access"><see cref="T:System.IO.FileAccess"/>A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenWrite">
            <summary>
            Creates a write-only FileStream.
            </summary>
            <returns>A new write-only unshared FileStream object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFileName"><see cref="T:System.String"/>The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName"><see cref="T:System.String"/>The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified destination file name.
            </summary>
            <param name="destinationFileName"><see cref="T:System.String"/>The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName"><see cref="T:System.String"/>The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file.
            The last parameter <paramref name="ignoreMetadataErrors"/> is not supported yet.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.
            </summary>
            <param name="fileSecurity"><see cref="N:System.Security.AccessControl"/>A FileSecurity object that describes an access control list (ACL) entry to apply to the current file.</param>
            <remarks>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. 
            Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
            <value>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object representing the parent directory of this file.</value>
            <remarks>To get the parent directory as a string, use the DirectoryName property.</remarks>
            
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.IsReadOnly">
            <summary>
            Gets or sets a value that determines if the current file is read only.
            </summary>
            <value>
            	<c>true</c> if the current file is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Name">
            <summary>
            Gets the name of the file with extension.
            </summary>
            <value>File name with extension.</value>
            <remarks>
            For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\Dir\Myfile.txt.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Length">
            <summary>
            Gets the file size.
            </summary>
            <value>The file size.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyOptions">
            <summary>
            Flags that specify how a file is to be copied. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.None">
            <summary>
            None of the other flags.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists">
            <summary>
            The copy operation fails immediately if the target file already exists.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.Restartable">
            <summary>
            Progress of the copy is tracked in the target file in case the copy fails. 
            The failed copy can be restarted at a later time by specifying the same values for 
            existing file name and new file name as those used in the call that failed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.OpenSourceForWrite">
            <summary>
            The file is copied and the original file is opened for write access.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.AllowDecryptedDestination">
            <summary>
            An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.        
            </summary>
            <remarks>
            <list type="table">
               <term>Windows 2000:</term>
               <description>This value is not supported</description>
            </list>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.CopySymlink">
            <summary>
            If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to. 
            </summary>
            <remarks>
            <list type="table">
               <term>Windows Server 2003 and Windows XP/2000:</term>
               <description>This value is not supported</description>
            </list>
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason">
            <summary>
            The reason that <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> was called.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.ChunkFinished">
            <summary>
            Another part of the data file was copied.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.StreamSwitch">
            <summary>
            Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision">
            <summary>
            The collection of values that <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler"/> should return in case of traversal failure.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Skip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Suppress">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Path">
            <summary>
            Performs operations on String instances that contain file or directory path information. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.UncPrefix">
            <summary>
            Provides standard Windows UNC path prefix
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix">
            <summary>
            Provides standard Windows long path prefix
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix">
            <summary>
            Provides standard Windows long path UNC prefix
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in GetInvalidPathChars.</param>
            <param name="extension">The new extension (with a leading period). Specify <see langword="null"/> to remove an existing extension from path.</param>
            <returns>The <paramref name="path"/> specified with the extension of the file name changed to the specified <paramref name="extension"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.Combine(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref ref="path2"/> contains an absolute path, this method returns <paramref ref="path2"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> with a trailing directory separator.
            </summary>
            <param name="path">The path.</param>
            <returns>The directory information for the specified <paramref name="path"/> with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.
            </summary>
            <param name="path">The path.</param>
            <returns>The directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryNameWithoutRoot"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path.</param>
            <returns>The path without the file name part (if any).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)">
            <summary>
            Returns the directory information for the specified path string without the root information.
            </summary>
            <param name="path">The path.</param>
            <returns>The path without the file name part and without the root information (if any).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified <paramref name="path"/>, or an empty string 
            if the path contains no extension. If the path is <see langword="null"/>, this method
            returns <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A String consisting of the characters after the last directory character in path. 
            If the last character of path is a directory or volume separator character, 
            this method returns Empty. If path is a null reference, this method returns 
            <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name without extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name.</param>
            <returns>A String consisting of the characters after the last directory character in path
            up to the extension. 
            If the last character of path is a directory or volume separator character, 
            this method returns an empty string. If path is a null reference, this method returns 
            <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83Path(System.String)">
            <summary>
            Retrieves the short 8.3 type path form of the specified path.
            </summary>
            <param name="path">The existing path. Can be regualr and long paths. Otherwise throws an error.</param>
            <returns>A path that has 8.3 type names.</returns>
            <remarks>Hasn't been tested on NTFS volumes with disabled 8.3 name generation. Suspect some weirdness.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83ShortPath(System.String)">
            <summary>
            Converts the specified existing path to its regular long form.
            </summary>
            <param name="path">The existing path.</param>
            <returns>The full path </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
            <remarks>See also <see cref="M:System.IO.Path.GetInvalidFileNameChars"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
            <remarks>See also <see cref="M:System.IO.Path.GetInvalidPathChars"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String)">
            <summary>
            Gets the path root.
            </summary>
            <param name="path">The path.</param>
            <returns>A string containing the root directory of path, such as "C:\", or <see langword="null"/> 
            if <paramref name="path"/> is <see langword="null"/>, or an empty string if path does not 
            contain root directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRandomFileName">
            <summary>
            Returns a random folder name or file name.
            </summary>
            <returns>A random folder name or file name.</returns>
            <remarks>This is equivalent to <see cref="M:System.IO.Path.GetRandomFileName"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the full path of the temporary file.</returns>
            <remarks>This is equivalent to <see cref="M:System.IO.Path.GetTempFileName"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath">
            <summary>
            Returns the path of the current system's temporary folder.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path information of a temporary directory.</returns>
            <remarks>This is equivalent to <see cref="M:System.IO.Path.GetTempPath"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedConnectionName(System.String)">
            <summary>
            Gets the connection name of the locally mapped drive.
            </summary>
            <param name="path">The local path with drive name. This method does not support long path prefixes.</param>
            <returns>String which has the following format <c>\\servername\sharename</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedUncName(System.String)">
            <summary>
            Gets the UNC name from the locally mapped path.
            </summary>
            <param name="path">The local path with drive name. </param>
            <returns>String in which drive name being replaced with it's UNC connection name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedInfoInternal(System.String)">
            <summary>
            Gets the mapped info internal.
            This method uses NativeMethods.RemoteNameInfo level to retieve more info :)
            </summary>
            <param name="path">The local path with drive name.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.RemoteNameInfo"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension. </param>
            <returns>
            	<c>true</c> if the specified path has extension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test. </param>
            <returns>
            	<c>true</c> if <paramref ref="path"/> contains an absolute path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidName(System.String)">
            <summary>
            Check if file or folder name has any invalid characters.
            </summary>
            <param name="name">File or folder name.</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidPath(System.String)">
            <summary>
            Verifies that the specified <paramref name="path"/> is valid and does not contain any wildcards.
            </summary>
            <param name="path">The string to test if it contains a valid path.</param>
            <returns><see langword="true"/> if <paramref name="path"/> is a valid path, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidPath(System.String,System.Boolean)">
            <summary>
            Verifies that the specified <paramref name="path"/> is valid and optionally may contain wildcards.
            </summary>
            <param name="path">The string to test if it contains a valid path.</param>
            <param name="allowWildcards">if set to <c>true</c> wildcards are allowed in the filename part of the path, otherwise the 
            presence of wildcards will render the path invalid.</param>
            <returns>
            	<see langword="true"/> if <paramref name="path"/> is a valid path, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLongPath(System.String)">
            <summary>
            Check if the given path is has the specific long path prefix.
            </summary>
            <param name="path">File or folder full path.</param>
            <returns><c>true</c> if has long path prefix, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)">
            <summary>
            	Retrieves the full long (or extended) unicode version of the specified <paramref name="path"/>.
            </summary>
            <remarks>
            <para>
            	This method takes care of different path conversions to be usable in Unicode 
            	variants of the Win32 funcitons (which are internally used throughout AlphaFS).
            </para>
            <para>
            	Regular paths are changed like the following:
            	<list type="table">
            		<item>
            			<term><c>C:\Somewhere\Something.txt</c></term>
            			<description><c>\\?\C:\Somewhere\Something.txt</c></description>
            		</item>
            		<item>
            			<term><c>\\Somewhere\Something.txt</c></term>
            			<description><c>\\?\UNC\Somewhere\Something.txt</c></description>
            		</item>
            	</list>
            </para> 
            <para>
            	Already processed paths are preserved untouched so to avoid mistakes of double prefixing.
            </para>
            <para>
            	If the <paramref name="path"/> is not an absolute path, or is not rooted, the path of the
            	current directory (and drive) is combined with the specified <paramref name="path"/> to form
            	an absolute path.
            </para>
            </remarks>
            <param name="path">File or Folder name to sanitize and prefix with proper standard.</param>
            <returns>The full long (or extended) unicode version of the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)">
            <summary>
            Gets the regular path from long prefixed one. i.e. \\?\C:\Temp\file.txt to C:\Temp\file.txt
            \\?\UNC\Server\share\file.txt to \\Server\share\file.txt
            </summary>
            <param name="path">The path.</param>
            <returns>Regular form path string.</returns>
            <remarks>This method does not handle paths with volume names, eg. \\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\Folder\file.txt </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUnc(System.String)">
            <summary>
            Determines whether the specified path is UNC path.
            Supports long path prefix.
            </summary>
            <param name="path">The path.</param>
            <returns>
            	<c>true</c> if the specified path is UNC; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar">
            <summary>
            Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
            <value>The alt directory separator char.</value>
            <remarks>Equivalent to <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
            <value>The directory separator char.</value>
            <remarks>Equivalent to <see cref="F:System.IO.Path.DirectorySeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.PathSeparator">
            <summary>
            A platform-specific separator character used to separate path strings in environment variables..
            </summary>
            <value>The path separator.</value>
            <remarks>Equivalent to <see cref="F:System.IO.Path.PathSeparator"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar">
            <summary>
            Provides a platform-specific volume separator character.
            </summary>
            <value>The volume separator char.</value>
            <remarks>Equivalent to <see cref="F:System.IO.Path.VolumeSeparatorChar"/></remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException">
            <summary>
            The file or directory was not a reparse point.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileShare">
            <summary>
            <para>Contains constants for controlling the kind of access other FileStream objects can have to the same file.</para>
            <para>This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileShare.None">
            <summary>
            Declines sharing of the current file. Any request to open the file (by this process or another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileShare.Read">
            <summary>
            Allows subsequent opening of the file for reading. If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileShare.Write">
            <summary>
            Allows subsequent opening of the file for writing. If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.        
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileShare.ReadWrite">
            <summary>
            Allows subsequent opening of the file for reading or writing. If this flag is not specified, any request to open the file for reading or writing (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileShare.Delete">
            <summary>
            Allows subsequent deleting of a file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo">
            <summary>
            Contains information about files in the specified directory.    
            </summary>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String,Alphaleonis.Win32.Filesystem.FileShare)"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileIndex">
            <summary>
            The byte offset of the file within the parent directory. 
            This member is undefined for file systems, such as NTFS, in which the position of a file within the parent directory is not fixed 
            and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.CreationTime">
            <summary>
            The time that the file was created.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastAccessTime">
            <summary>
            The time that the file was last accessed.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastWriteTime">
            <summary>
            The time that the file was last written to.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ChangeTime">
            <summary>
            The time that the file was last changed.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.EndOfFile">
            <summary>
            The absolute new end-of-file position as a byte offset from the start of the file to the end of the file. 
            Because this value is zero-based, it actually refers to the first free byte in the file. In other words, <b>EndOfFile</b> is the offset to 
            the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.AllocationSize">
            <summary>
            The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileAttributes">
            <summary>
            The file attributes.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ExtendedAttributesSize">
            <summary>
            The size of the extended attributes for the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ShortName">
            <summary>
            The short 8.3 file naming convention (for example, FILENAME.TXT) name of the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileId">
            <summary>
            The file ID.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">
            <summary>
            It is too late to perform the requested operation, since the Transaction has already been committed.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.KernelTransaction">
            <summary>
            A KTM transaction object for use with the transacted operations in <see cref="N:Alphaleonis.Win32.Filesystem"/>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Transactions.Transaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class, internally using the
            specified <see cref="T:System.Transactions.Transaction"/>. This method allows the usage of methods accepting a 
            <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> with an instance of <see cref="T:System.Transactions.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to use for any transactional operations.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor,
            infinite timeout and no description.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor.
            </summary>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Security.AccessControl.ObjectSecurity,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class.
            </summary>
            <param name="securityDescriptor">The security descriptor.</param>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para>
            <para>Specify <c>0</c> to provide an infinite timeout.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Commit">
            <summary>
            Requests that the specified transaction be committed.
            </summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">The transaction was already aborted.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occured</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Rollback">
            <summary>
            Requests that the specified transaction be rolled back. This function is synchronous.
            </summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occured</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.KernelTransaction.SafeHandle">
            <summary>
            Gets the safe handle.
            </summary>
            <value>The safe handle.</value>
        </member>
        <member name="T:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle">
            <summary>
            IntPtr wrapper which can be used as result of
            Marshal.AllocHGlobal operation.
            Calls Marshal.FreeHGlobal when disposed or finalized.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor">
            <summary>
            Creates new instance with zero IntPtr
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor(System.Int32)">
            <summary>
            Creates new instance which allocates unmanaged memory of given size
            Can throw OutOfMemoryException 
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance-
            </summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.ReleaseHandle">
            <summary>
            Called when object is disposed or finalized.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo">
            <summary>
            Represents information about a file system entry. Used together with <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/>.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> class.
            </summary>
            <param name="findData">The WIN32 find data structure.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Win32FindData">
            <summary>
            Gets internal WIN32 FIND Data
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.AlternateFileName">
            <summary>
            Gets the 8.3 version of the filename.
            </summary>
            <value>the 8.3 version of the filename.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Created">
            <summary>
            Gets the time this entry was created.
            </summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastAccessed">
            <summary>
            Gets the time this entry was last accessed.
            </summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastModified">
            <summary>
            Gets the time this entry was last modified.
            </summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsDirectory">
            <summary>
            Gets a value indicating whether this instance represents a directory.
            </summary>
            <value>
            	<c>true</c> if this instance represents a directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsFile">
            <summary>
            Gets a value indicating whether this instance is definitely a file.
            </summary>
            <value><c>true</c> if this instance is file; otherwise, <c>false</c>.</value>
            <remarks>Definite file is NOT a directory and NOT a device.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsReparsePoint">
            <summary>
            Gets a value indicating whether this instance is a reparse point.
            </summary>
            <value>
            	<c>true</c> if this instance is a reparse point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsMountPoint">
            <summary>
            Gets a value indicating whether this instance is a mount point.
            </summary>
            <value>
            	<c>true</c> if this instance is a mount point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsSymbolicLink">
            <summary>
            Gets a value indicating whether this instance is a symbolic link.
            </summary>
            <value>
            	<c>true</c> if this instance is a symbolic link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.ReparsePointTag">
            <summary>
            Gets the reparse point tag of this entry.
            </summary>
            <value>The reparse point tag of this entry.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath">
            <summary>
            The real full path of the file system object/entry.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.VirtualFullPath">
            <summary>
            This property is intended to be used with in the future versions of the library
            to store a full path that is relative to a parent symbolic link or junction point.
            It will be correctly set by enumerating methods.
            <code>
            Parent Symbolic Directory Link Pointed
            From: C:\Users\Novels\Application Data
            To: C:\Users\Novels\AppData\Roaming
            so the entryu info for vlc-qt-interface.ini file will have following values
            FullPath: C:\Users\Novels\AppData\Roaming\vlc\vlc-qt-interface.ini
            VirtualFullPath: C:\Users\Novels\Application Data\vlc\vlc-qt-interface.ini
            </code>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle">
            <summary>
            Provides a concrete implementation of SafeHandle supporting transactions.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator">
            <summary>
            Enumerator used to enumerate file system entries (i.e. files and directories).
            </summary>
            <remarks>The enumerator can only be used to enumerate through the items once, 
            and cannot be reset.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> class.
            </summary>
            <param name="searchString">A search string, the path which has wildcard characters,
             for example, an asterisk (*) or a question mark (?).</param>
            <remarks>Note that no validation is done whether or not the path specified in searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> class.
            </summary>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerates only directories.</param>
            <remarks>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for
            enumeration as part of a transaction.
            </summary>
            <param name="transaction">The kernel transaction object.</param>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <remarks><para>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</para>
            <para>If <paramref name="transaction"/> is <see langword="null"/>, this constructor is equivalent
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)"/>, leading to non-transacted call.</para></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for
            enumeration as part of a transaction.
            </summary>
            <param name="transaction">The kernel transaction object.</param>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <remarks><para>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</para>
            	<para>If <paramref name="transaction"/> is <see langword="null"/>, this constructor is equivalent
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)"/>, leading to non-transacted call.</para></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next file system entry matching the specified pattern.
            </summary>
            <returns>
            	<see langword="true"/> if the enumerator was successfully advanced to the next element; 
            	<see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Filter">
            <summary>
            Filters the current and parent folders WIN32 notation ("." and "..").
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Reset">
            <summary>
            This method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">always.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Current">
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> representing the file system entry
            at the current position of the enumerator.
            </summary>
            <value>the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> representing the file system entry
            at the current position of the enumerator.</value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.OnlyFolders">
            <summary>
            Gets or sets a value indicating whether to enumerate only folders.
            </summary>
            <value><c>true</c> if only folders should be enumerated; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileAttributes">
            <summary>
            The file attributes of a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.None">
            <summary>
            No attributes set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Archive">
            <summary>
            The file or directory is an archive file or directory. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Compressed">
            <summary>
            <para>The file or directory is compressed.</para>
            <para>For a file, this means that all of the data in the file is compressed.</para>
            <para>For a directory, this means that compression is the default for newly created files and subdirectories.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Device">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Directory">
            <summary>
            The handle identifies a directory.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Encrypted">
            <summary>
            <para>The file or directory is encrypted.</para>
            <para>For a file, this means that all data in the file is encrypted.</para>
            <para>For a directory, this means that encryption is the default for newly created files and subdirectories.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Hidden">
            <summary>
            The file or directory is hidden. It is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Normal">
            <summary>
            The file or directory does not have other attributes set. This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.NotContentIndexed">
            <summary>
            The file is not to be indexed by the content indexing service.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Offline">
            <summary>
            <para>The file data is not available immediately.</para>
            <para>This attribute indicates that the file data is physically moved to offline storage.</para>
            <para>This attribute is used by Remote Storage, which is the hierarchical storage management software.</para>
            <para><b>Note</b> Applications should not arbitrarily change this attribute.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.ReadOnly">
            <summary>
            <para>The file or directory is read-only. </para>
            <para>For a file, applications can read the file, but cannot write to it or delete it.</para>
            <para>For a directory, applications cannot delete it.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.ReparsePoint">
            <summary>
            The file or directory has an associated reparse point.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.SparseFile">
            <summary>
            The file is a sparse file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.System">
            <summary>
            The file or directory is part of the operating system, or the operating system uses the file or directory exclusively.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Temporary">
            <summary>
            <para>The file is being used for temporary storage.</para>
            <para>File systems attempt to keep all of the data in memory for quick access, rather than flushing it back to mass storage.</para>
            <para>An application should delete a temporary file as soon as it is not needed.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributes.Virtual">
            <summary>
            The file is a virtual file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DriveType">
            <summary>
            Specifies the type of a drive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.Unknown">
            <summary>
            The drive type cannot be determined.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.NoRootDir">
            <summary>
            The root path is invalid; for example, there is no volume is mounted at the path.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.Removable">
            <summary>
            The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.Fixed">
            <summary>
            The drive has fixed media; for example, a hard drive or flash drive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.Remote">
            <summary>
            The drive is a remote (network) drive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.CDRom">
            <summary>
            The drive is a CD-ROM drive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DriveType.RamDisk">
            <summary>
            The drive is a RAM disk.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler">
            <summary>
            Callback delegate used by some of the Directory methods to obtain a <see cref="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision"/> of what to do in case of enumeration traversal failure.
            </summary>
            <param name="path">The path of failed directory of file</param>
            <param name="e">The exception that occured during operation</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision"/></returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException">
            <summary>
            The remote server or share does not support transacted file operations.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ReparsePointTag">
            <summary>
            Enumeration specifying the different reparse point tags.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.None">
            <summary>
            The entry is not a reparse point
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Dfs">
            <summary>
            Dfs
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Dfsr">
            <summary>
            Dfsr
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Hsm">
            <summary>
            Hsm
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Hsm2">
            <summary>
            Hsm2
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.MountPoint">
            <summary>
            The entry is a mount point
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Sis">
            <summary>
            Sis
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.SymLink">
            <summary>
            The entry is a symbolic link
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Directory">
            <summary>
            Exposes static methods for creating, moving, and enumerating through directories and subdirectories. 
            </summary>
            <remarks>
            <para>As opposed to <see cref="T:System.IO.Directory"/> this class supports the use of extenden length unicode paths, such as 
            <c>\\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\Program Files\Internet Explorer</c>. In addition, support for transacted file operation 
            using the kernel transaction manager is provided. (See also <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/>).</para>
            <para>Note that no methods in this class perform any validation of the supplied paths. They are passed as is to the corresponding
            native kernel functions, meaning that invalid paths may result in exceptions of a type other than the expected for a certain operation.
            </para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String)">
            <overloads>
            <summary>Creates a new directory.</summary>
            </overloads>
            <summary>
            Creates a new directory. If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory.
            </summary>
            <param name="pathName">The path of the directory to be created.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a new directory. If the underlying file system supports security on files and directories, the function applies a security descriptor to the new directory.
            </summary>
            <param name="pathName">The path of the directory to be created.</param>
            <param name="security">The seurity descriptor to apply to the directory</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String)">
            <summary>
            Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies a default security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePathName">The path of the directory to use as a template when creating the new directory. </param>
            <param name="newPathName">The path of the directory to be created. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePathName">The path of the directory to use as a template when creating the new directory. </param>
            <param name="newPathName">The path of the directory to be created. </param>
            <param name="security">The seurity descriptor to apply to the directory.</param>
            <exception cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">The specified directory already exists.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">One or more intermediate directories do not exist; this function will only create the final directory in the path.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryInternal(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes)">
            <summary>
            Creates a new directory with the attributes of a specified template directory (if one is specified). 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePathName">The path of the directory to use as a template when creating the new directory. May be <see langword="null"/> to indicate 
            that no template should be used.</param>
            <param name="newPathName">The path of the directory to be created.</param>
            <param name="lpSecurityAttributes">The security descriptor to apply to the newly created directory. May be <see langword="null"/> in which case a default 
            security descriptor will be applied.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates a new directory as a transacted operation. 
            If the underlying file system supports security on files and directories, the function applies a 
            default security descriptor to the new directory. 
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="newPathName">The path of the directory to be created.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a new directory as a transacted operation. 
            If the underlying file system supports security on files and directories, the function 
            applies a specified security descriptor to the new directory. 
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="newPathName">The path of the directory to be created. </param>
            <param name="security">
            <para>
                If <paramref name="security"/> is <see langword="null"/>, the directory gets a default security descriptor. 
                The access control lists (ACL) in the default security descriptor for a directory are inherited from its parent directory.
            </para>
            <para>
                The target file system must support security on files and directories for this parameter to have an effect. 
                This is indicated when <see cref="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.String)"/> returns an object with <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.HasPersistentAccessControlLists"/> 
                set to <c>true</c>.
            </para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Creates a new directory as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="templatePathName">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="transaction">The transaction to use.</param>
            <param name="newPathName">The path of the directory to be created. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a new directory as a transacted operation, with the attributes of a specified template directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory. The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="templatePathName">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="transaction">The transaction to use.</param>
            <param name="newPathName">The path of the directory to be created. </param>
            <param name="security">
            <para>
                If <paramref name="security"/> is <see langword="null"/>, the directory gets a default security descriptor. 
                The access control lists (ACL) in the default security descriptor for a directory are inherited from its parent directory.
            </para>
            <para>
                The target file system must support security on files and directories for this parameter to have an effect. 
                This is indicated when <see cref="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.String)"/> returns an object with <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.HasPersistentAccessControlLists"/> 
                set to <c>true</c>.
            </para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Counts files in a given directory. Uses <see cref="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)"/> method.
            It's way faster than using lots of memory through <see cref="M:System.IO.Directory.GetFiles(System.String)"/> method.
            </summary>
            <param name="directory">The directory path.</param>
            <param name="searchOption"><see cref="T:System.IO.SearchOption"/> The search option. Either top only directory, or subfolders too.</param>
            <param name="continueOnAccessErrors">if set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points, otherwise a <see cref="T:System.UnauthorizedAccessException"/> will be thrown.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String)">
            <overloads>
            <summary>
            Deletes an existing directory.
            </summary>
            </overloads>
            <summary>
            Deletes an existing empty directory.
            </summary>
            <param name="path">The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="directoryPath">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove all subdirectories and files recursively; otherwise, <c>false</c> only the top level empty directory.</param>
            <param name="ignoreReadOnly">if set to <c>true</c> overrides read only attribute of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Deletes an existing empty directory as a transacted operation.
            </summary>
            <param name="pathName">
            <para>The path of the directory to be removed. </para>
            <para>The path must specify an empty directory, and the calling process must have delete access to the directory.</para>
            <para>The path of the directory to be removed. This path must specify an empty directory, and the calling process must have delete access to the directory.</para>
            <para>The directory must reside on the local computer; otherwise, the function throws <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/>.</para>
            </param>
            <param name="transaction">The transaction to use</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pathName"/> or <paramref name="transaction"/> is <see langword="null"/></exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException">The directory <paramref name="pathName"/> does not reside on the local computer.</exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException">The transaction object is not valid for this operation.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(System.String)">
            <overloads>
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            </overloads>
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>Possible performance improvement may be achieved by utilizing <c>FINDEX_SEARCH_OPS.FindExSearchLimitToDirectories</c>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
            <returns>
            	<c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String)">
            <overloads>
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            </overloads>
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory.
            </summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory.
            </summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="path"/> parameter. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(System.String)">
            <overloads>
            <summary>
            Gets the creation date and time, in local time, of a directory.
            </summary>
            </overloads>
            <summary>
            Gets the creation date and time, in local time, of a directory.
            </summary>
            <param name="path">The path of the directory. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(System.String)">
            <overloads>
            <summary>
            Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.
            </summary>
            </overloads>
            <summary>
            Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.
            </summary>
            <param name="path">The path of the directory. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(System.String)">
            <overloads>
            Returns the date and time the specified file or directory was last accessed. 
            </overloads>
            <summary>
            Returns the date and time the specified file or directory was last accessed. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed. 
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(System.String)">
             <overloads>
            Returns the date and time the specified file or directory was last written to. 
             </overloads>
             <summary>
            Returns the date and time the specified file or directory was last written to. 
             </summary>
             <param name="path">The path.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(System.String)">
            <overloads>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </overloads>
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory as part of a transaction.
            </summary>
            <param name="transaction">The transaction to use.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory as part of a transaction. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed as part of a transaction. 
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed as part of a transaction. 
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
             <summary>
            Returns the date and time the specified file or directory was last written to as part of a transaction. 
             </summary>
             <param name="path">The path.</param>
             <param name="transaction">The transaction to use.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to as part of a transaction.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <param name="transaction">The transaction to use.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set. </param>
            <exception cref="T:System.IO.IOException">An IO error occurred.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> DirectorySecurity object to the specified directory.
            </summary>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="directorySecurity"/> to 
            apply to <paramref name="path"/>.</remarks>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A  <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the <paramref name="path"/> parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control 
            list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String)">
            <overloads>
            Moves a file or a directory and its contents to a new location.
            </overloads>
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move. </param>
            <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
            <remarks>For more options, see the Move methods of <see cref="T:Alphaleonis.Win32.Filesystem.File"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
            <remarks>For more options, see the Move methods of <see cref="T:Alphaleonis.Win32.Filesystem.File"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>
            An array of type String containing the names of subdirectories in <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref ref="path"/>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>
            A String array of directories matching the search pattern. Directory names include the full path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <overloads>
            Gets an array of directories contained within a directory or drive.
            </overloads>
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref ref="path"/>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the
            search operation should include all subdirectories or only the current directory.</param>
            <returns>
            A String array of directories matching the search pattern. Directory names include the full path.
            </returns>
            <remarks>This method may consume a lot of memory if a large tree of files, directories and subdirectories
            are searched. Consider using <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> instead if possible.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory. The search is performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>
            An array of type String containing the names of subdirectories in <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.  The search is performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref ref="path"/>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>
            A String array of directories matching the search pattern. Directory names include the full path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory,
            using a value to determine whether to search subdirectories. The search is performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref ref="path"/>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the
            search operation should include all subdirectories or only the current directory.</param>
            <returns>
            A String array of directories matching the search pattern. Directory names include the full path.
            </returns>
            <remarks>This method may consume a lot of memory if a large tree of files, directories and subdirectories
            are searched. Consider using <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> instead if possible.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot 
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or 
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <overloads>
            Retrieves the names of files contained within a directory.
            </overloads>
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern, using a 
            value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot 
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or 
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the 
            search operation should include all subdirectories or only the current directory.</param>
            <returns>A String array containing the names of files in the specified 
            directory that match the specified search pattern. File names include the full path.</returns>
            <remarks>This method may consume a lot of memory if a large tree of files, directories and subdirectories
            are searched. Consider using <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> instead if possible.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the names of files in the specified directory. The search will be performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>
            A String array of file names in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern. The search will be performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>
            A String array containing the names of files in the specified directory that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern, using a
            value to determine whether to search subdirectories. The search will be performed as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> values that specifies whether the
            search operation should include all subdirectories or only the current directory.</param>
            <returns>
            A String array containing the names of files in the specified
            directory that match the specified search pattern. File names include the full path.
            </returns>
            <remarks>This method may consume a lot of memory if a large tree of files, directories and subdirectories
            are searched. Consider using <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> instead if possible.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>A string containing the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>
            A String array containing the names of file system entries in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or 
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or 
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in 
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>
            A String array containing the names of file system entries matching the specified pattern 
            in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">The search option.</param>
            <returns>
            A String array containing the names of file system entries matching the specified pattern
            in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            The file system entries are retrieved as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>
            A String array containing the names of file system entries in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            The file system entries are retrieved as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            A String array containing the names of file system entries in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            The file system entries are retrieved as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="searchOption">The search option.</param>
            <returns>
            A String array containing the names of file system entries matching the specified pattern
            in the specified directory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String)">
            <overloads>
            Enumerates file system entries contained in a specified directory as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.
            </overloads>
            <summary>
            Enumerates all file system entries as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances 
            in the specified <paramref name="directory"/>.
            </summary>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
            <param name="directory">The directory path containing the file system entries to enumerate.</param>
            <returns>An enumerable containing the file system entries for the specified <paramref name="directory"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String)">
            <summary>
            Enumerates the file system entries in the specified <paramref name="directory"/> matching 
            the specified <paramref name="searchPattern"/> as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.
            </summary>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
            <param name="directory">The directory or path, and the file name, which can include 
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>An enumerable containing the file system entries for the specified <paramref name="directory"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Enumerates all file system entries as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances
            in the specified <paramref name="directory"/>, optionally enumerating
            directories only.
            </summary>
            <param name="directory">The directory or path, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Enumerates the file system entries in the specified <paramref name="directory"/> matching
            the specified <paramref name="searchPattern"/> as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances,
            optionally enumerating directories only.
            </summary>
            <param name="directory">The directory or path, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <param name="searchOption">The search options. <see cref="T:System.IO.SearchOption"/></param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Enumerates all file system entries as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances 
            in the specified <paramref name="directory"/> as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="directory">The directory or path containing the file system entries to enumerate.</param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Enumerates the file system entries in the specified <paramref name="directory"/> matching 
            the specified <paramref name="searchPattern"/> as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances as part 
            of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="directory">The directory or path, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Enumerates all file system entries as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances
            in the specified <paramref name="directory"/> as part of a transaction, optionally enumerating
            directories only.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="directory">The directory path</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Enumerates the file system entries in the specified <paramref name="directory"/> matching
            the specified <paramref name="searchPattern"/> as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances as part
            of a transaction, optionally enumerating directories only.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="directory">The directory or path, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="searchPattern">The search string to match against the names of files in path.
            The <paramref name="searchPattern"/> parameter cannot end in two periods ("..") or
            contain two periods ("..") followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or
            <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in
            <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <param name="searchOption">The search option. <see cref="T:System.IO.SearchOption"/></param>
            <returns>
            An enumerable containing the file system entries for the specified <paramref name="directory"/>
            </returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IList{System.Type})">
            <summary>
            Enumerates the file system entries in the specified <paramref name="directory"/> matching entries
            with the <paramref name="searchPattern"/> as <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances. This method gives more control over
            the progress and exception handling.
            </summary>
            <param name="transaction">Optional kernel transaction object. Pass <c>NULL</c> for non-transacted call.</param>
            <param name="directory">The directory path where to start enumeration. Use <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/> to get beyond 254 chars limit.</param>
            <param name="searchPattern">The search pattern prefix, wildcards, or a mixture.</param>
            <param name="searchOption">Whether to search files in the specified directory only, or all subdirectories recursively.</param>
            <param name="directoriesOnly">if set to <c>true</c> [directories only].</param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory or a <see langword="null"/> reference if the path is the root.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.Directory"/> nor <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.Directory"/> attribute without <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction. For a non transacted operation pass <c>NULL</c>.</param>
            <param name="directory">The target directory.</param>
            <param name="searchOption">The search option. Either top level or subfolders too.</param>
            <param name="continueOnAccessErrors">if set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableEncryption(System.String)">
            <summary>
            Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <param name="directory">The name of the directory for which to enable encryption.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableEncryption(System.String)">
            <summary>
            Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <param name="directory">The name of the directory for which to disable encryption.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="directoryPath"/>.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="directoryPath">A path to a directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified <paramref name="transaction"/>
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="transaction">The transaction to use for this operation.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified <paramref name="transaction"/> and
            share mode.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="transaction">The transaction to use for this operation.</param>
            <param name="shareMode">The sharing mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String,Alphaleonis.Win32.Filesystem.FileShare)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified
            share mode.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The sharing mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Retrieves information about files in the directory handle specified.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="fileHandle">An open handle to the directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>    
        </member>
    </members>
</doc>
